{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91497,"databundleVersionId":11441828,"sourceType":"competition"}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/davidsteffes/march-madness-dstef?scriptVersionId=228333951\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        x = os.path.join(dirname, filename)\n        print(x)\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:48:42.889817Z","iopub.execute_input":"2025-03-18T20:48:42.890179Z","iopub.status.idle":"2025-03-18T20:48:42.916774Z","shell.execute_reply.started":"2025-03-18T20:48:42.890152Z","shell.execute_reply":"2025-03-18T20:48:42.915764Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/march-machine-learning-mania-2025/Conferences.csv\n/kaggle/input/march-machine-learning-mania-2025/SeedBenchmarkStage1.csv\n/kaggle/input/march-machine-learning-mania-2025/WNCAATourneyDetailedResults.csv\n/kaggle/input/march-machine-learning-mania-2025/WRegularSeasonCompactResults.csv\n/kaggle/input/march-machine-learning-mania-2025/MNCAATourneySeedRoundSlots.csv\n/kaggle/input/march-machine-learning-mania-2025/MRegularSeasonDetailedResults.csv\n/kaggle/input/march-machine-learning-mania-2025/MNCAATourneyCompactResults.csv\n/kaggle/input/march-machine-learning-mania-2025/MGameCities.csv\n/kaggle/input/march-machine-learning-mania-2025/WSecondaryTourneyCompactResults.csv\n/kaggle/input/march-machine-learning-mania-2025/WGameCities.csv\n/kaggle/input/march-machine-learning-mania-2025/MSeasons.csv\n/kaggle/input/march-machine-learning-mania-2025/WNCAATourneySlots.csv\n/kaggle/input/march-machine-learning-mania-2025/MSecondaryTourneyTeams.csv\n/kaggle/input/march-machine-learning-mania-2025/SampleSubmissionStage2.csv\n/kaggle/input/march-machine-learning-mania-2025/Cities.csv\n/kaggle/input/march-machine-learning-mania-2025/MTeamSpellings.csv\n/kaggle/input/march-machine-learning-mania-2025/MRegularSeasonCompactResults.csv\n/kaggle/input/march-machine-learning-mania-2025/MMasseyOrdinals.csv\n/kaggle/input/march-machine-learning-mania-2025/MSecondaryTourneyCompactResults.csv\n/kaggle/input/march-machine-learning-mania-2025/WTeams.csv\n/kaggle/input/march-machine-learning-mania-2025/WConferenceTourneyGames.csv\n/kaggle/input/march-machine-learning-mania-2025/MNCAATourneySlots.csv\n/kaggle/input/march-machine-learning-mania-2025/MNCAATourneySeeds.csv\n/kaggle/input/march-machine-learning-mania-2025/WNCAATourneyCompactResults.csv\n/kaggle/input/march-machine-learning-mania-2025/WSeasons.csv\n/kaggle/input/march-machine-learning-mania-2025/WNCAATourneySeeds.csv\n/kaggle/input/march-machine-learning-mania-2025/MTeamCoaches.csv\n/kaggle/input/march-machine-learning-mania-2025/MConferenceTourneyGames.csv\n/kaggle/input/march-machine-learning-mania-2025/WRegularSeasonDetailedResults.csv\n/kaggle/input/march-machine-learning-mania-2025/MNCAATourneyDetailedResults.csv\n/kaggle/input/march-machine-learning-mania-2025/WTeamSpellings.csv\n/kaggle/input/march-machine-learning-mania-2025/MTeamConferences.csv\n/kaggle/input/march-machine-learning-mania-2025/MTeams.csv\n/kaggle/input/march-machine-learning-mania-2025/WTeamConferences.csv\n/kaggle/input/march-machine-learning-mania-2025/SampleSubmissionStage1.csv\n/kaggle/input/march-machine-learning-mania-2025/WSecondaryTourneyTeams.csv\n","output_type":"stream"}],"execution_count":171},{"cell_type":"markdown","source":"# **March Madness**\n\n#### We want to create an ML algo to predict the winner of each and every men's (and women's) college tournament basketball game.\n\n#### What we are doing different than others:\n\n#### Everyone is doing ELO. We are going to do both ELO and an iterative performance rating that disregards the order of wins, so that if a team beats a team that ends up having a very high rating at the end of the year (which they did not have at the time of the game for myriad reasons) they get rewarded for it.\n\n#### Additionally we have two more tricks up our sleeve.\n\n     1) The derivatives of ELO to give us a momentum/\"clicking at the right time\" index.\n\n     2) Bart Torvik... these kiddos don't know about real sports betting -> Here are the additional adjustments I make:\n\n\nThere's a recency bias—all games in the last 40 days count 100%, then degrade 1% per day until they're 80 days old, after which all games count 60%.\nAn adjustment that discounts blowouts in mismatches—if the margin of victory (MOV) is more than 10 points and the difference in Barthags is above a threshold, the game starts getting discounted. If the MOV is 20 points or higher, the discount is (Higher Barthag - Lower Barthag - .5) * 2. So if a team with a Barthag of .8000 is playing a team with a Barthag of .2000, and it wins by 20 points, the game value will be 1 - (.8 - .2  -.5) * 2, or 80%\nAs with Kenpom, there is also a preseason component that is phased out once a team has played 13 adjusted games (since not all games count for 100% of a game, it typically sticks around for 15 or 16 games).\nUltimately, because of these differences, the final numbers are similar but different. Notably, T-Rank has a wider \"spread\" between top and bottom teams, probably because Kenpom has a much more significant cap on margin of victory.","metadata":{}},{"cell_type":"code","source":"dataframes = {}  # dictionary to hold all dataframes\n\n# Walk through the input directory\nfor dirname, _, filenames in os.walk('/kaggle/input/march-machine-learning-mania-2025'):\n    for filename in filenames:\n        if filename.endswith('.csv'):\n            file_path = os.path.join(dirname, filename)\n            # Use the filename (minus extension) as the dictionary key\n            df_name = filename.replace('.csv', '')\n            dataframes[df_name] = pd.read_csv(file_path)\n\n# Now you can access each DataFrame by its filename key\nprint(dataframes.keys())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:48:46.312631Z","iopub.execute_input":"2025-03-18T20:48:46.31298Z","iopub.status.idle":"2025-03-18T20:48:49.768471Z","shell.execute_reply.started":"2025-03-18T20:48:46.31295Z","shell.execute_reply":"2025-03-18T20:48:49.76758Z"}},"outputs":[{"name":"stdout","text":"dict_keys(['Conferences', 'SeedBenchmarkStage1', 'WNCAATourneyDetailedResults', 'WRegularSeasonCompactResults', 'MNCAATourneySeedRoundSlots', 'MRegularSeasonDetailedResults', 'MNCAATourneyCompactResults', 'MGameCities', 'WSecondaryTourneyCompactResults', 'WGameCities', 'MSeasons', 'WNCAATourneySlots', 'MSecondaryTourneyTeams', 'SampleSubmissionStage2', 'Cities', 'MTeamSpellings', 'MRegularSeasonCompactResults', 'MMasseyOrdinals', 'MSecondaryTourneyCompactResults', 'WTeams', 'WConferenceTourneyGames', 'MNCAATourneySlots', 'MNCAATourneySeeds', 'WNCAATourneyCompactResults', 'WSeasons', 'WNCAATourneySeeds', 'MTeamCoaches', 'MConferenceTourneyGames', 'WRegularSeasonDetailedResults', 'MNCAATourneyDetailedResults', 'WTeamSpellings', 'MTeamConferences', 'MTeams', 'WTeamConferences', 'SampleSubmissionStage1', 'WSecondaryTourneyTeams'])\n","output_type":"stream"}],"execution_count":172},{"cell_type":"code","source":"for key, df in dataframes.items():\n    globals()[key] = df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:48:52.128671Z","iopub.execute_input":"2025-03-18T20:48:52.129001Z","iopub.status.idle":"2025-03-18T20:48:52.172743Z","shell.execute_reply.started":"2025-03-18T20:48:52.128975Z","shell.execute_reply":"2025-03-18T20:48:52.17146Z"}},"outputs":[],"execution_count":173},{"cell_type":"markdown","source":"# The first step in data processing is to ensure that all of the important data relates directly to a team/team id","metadata":{}},{"cell_type":"markdown","source":"## Frustrating realization. The women's and men's data is very different.\n\n#### Let's do some super basic feature engineering. Using my personal \"expertise\", let us drop what we find unessential.\n\n#### What we need: 'SeedBenchmarkStage1', 'WNCAATourneyDetailedResults',  'MNCAATourneySeedRoundSlots', 'MRegularSeasonDetailedResults',    'WNCAATourneySlots', 'MSecondaryTourneyTeams', 'MMasseyOrdinals',  'WConferenceTourneyGames', 'MNCAATourneySlots', 'MNCAATourneySeeds', 'WSeasons', 'WNCAATourneySeeds', 'MConferenceTourneyGames', 'WRegularSeasonDetailedResults', 'MNCAATourneyDetailedResults',  'WSecondaryTourneyTeams'","metadata":{}},{"cell_type":"markdown","source":"![![image.png](attachment:0920ffe6-5f5a-4d9e-abcf-b892792acd78.png)]","metadata":{},"attachments":{"0920ffe6-5f5a-4d9e-abcf-b892792acd78.png":{"image/png":""}}},{"cell_type":"code","source":"lowest_idx_2025 = MMasseyOrdinals.loc[MMasseyOrdinals['Season'] == 2025, 'OrdinalRank'].idxmin()\nlowest_row_2025 = MMasseyOrdinals.loc[lowest_idx_2025]\nprint(lowest_row_2025)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:07:55.066961Z","iopub.execute_input":"2025-03-18T20:07:55.067441Z","iopub.status.idle":"2025-03-18T20:07:55.083371Z","shell.execute_reply.started":"2025-03-18T20:07:55.067405Z","shell.execute_reply":"2025-03-18T20:07:55.082297Z"}},"outputs":[{"name":"stdout","text":"Season           2025\nRankingDayNum       9\nSystemName         AP\nTeamID           1242\nOrdinalRank         1\nName: 5264571, dtype: object\n","output_type":"stream"}],"execution_count":111},{"cell_type":"markdown","source":"## This betrays a misunderstanding of ordinal rankings. There are many #1 for each year, unless a team runs the board and is #1 all year.\n\n## What we really want to do with the ordinal ranking is to examine how its absolute value at the end of the season, how its transformation for each team over the year, and how bracketing/classifying teams into ordinal brackets tells us which teams are capable of winning and which are not. For instance some brackets may almost never win against others (similar to GTO poker)","metadata":{}},{"cell_type":"code","source":"MRegularSeasonDetailedResults","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:07:56.048543Z","iopub.execute_input":"2025-03-18T20:07:56.048903Z","iopub.status.idle":"2025-03-18T20:07:56.08616Z","shell.execute_reply.started":"2025-03-18T20:07:56.048871Z","shell.execute_reply":"2025-03-18T20:07:56.0851Z"}},"outputs":[{"execution_count":112,"output_type":"execute_result","data":{"text/plain":"        Season  DayNum  WTeamID  WScore  LTeamID  LScore WLoc  NumOT  WFGM  \\\n0         2003      10     1104      68     1328      62    N      0    27   \n1         2003      10     1272      70     1393      63    N      0    26   \n2         2003      11     1266      73     1437      61    N      0    24   \n3         2003      11     1296      56     1457      50    N      0    18   \n4         2003      11     1400      77     1208      71    N      0    30   \n...        ...     ...      ...     ...      ...     ...  ...    ...   ...   \n118877    2025     132     1196      86     1397      77    N      0    26   \n118878    2025     132     1272      84     1412      72    N      0    32   \n118879    2025     132     1276      59     1458      53    N      0    19   \n118880    2025     132     1433      68     1206      63    N      0    19   \n118881    2025     132     1463      90     1165      84    N      0    31   \n\n        WFGA  ...  LFGA3  LFTM  LFTA  LOR  LDR  LAst  LTO  LStl  LBlk  LPF  \n0         58  ...     10    16    22   10   22     8   18     9     2   20  \n1         62  ...     24     9    20   20   25     7   12     8     6   16  \n2         58  ...     26    14    23   31   22     9   12     2     5   23  \n3         38  ...     22     8    15   17   20     9   19     4     3   23  \n4         61  ...     16    17    27   21   15    12   10     7     1   14  \n...      ...  ...    ...   ...   ...  ...  ...   ...  ...   ...   ...  ...  \n118877    61  ...     26    25    32    5   20    15    9     7     5   21  \n118878    68  ...     27    17    23   21   23    10   15     5     4   21  \n118879    59  ...     39    16    18   15   31     8    6     3     2   14  \n118880    47  ...     21    16    19   14   19    13   11    11     3   22  \n118881    62  ...     27    15    16    4   26    15   11     2     2   16  \n\n[118882 rows x 34 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Season</th>\n      <th>DayNum</th>\n      <th>WTeamID</th>\n      <th>WScore</th>\n      <th>LTeamID</th>\n      <th>LScore</th>\n      <th>WLoc</th>\n      <th>NumOT</th>\n      <th>WFGM</th>\n      <th>WFGA</th>\n      <th>...</th>\n      <th>LFGA3</th>\n      <th>LFTM</th>\n      <th>LFTA</th>\n      <th>LOR</th>\n      <th>LDR</th>\n      <th>LAst</th>\n      <th>LTO</th>\n      <th>LStl</th>\n      <th>LBlk</th>\n      <th>LPF</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2003</td>\n      <td>10</td>\n      <td>1104</td>\n      <td>68</td>\n      <td>1328</td>\n      <td>62</td>\n      <td>N</td>\n      <td>0</td>\n      <td>27</td>\n      <td>58</td>\n      <td>...</td>\n      <td>10</td>\n      <td>16</td>\n      <td>22</td>\n      <td>10</td>\n      <td>22</td>\n      <td>8</td>\n      <td>18</td>\n      <td>9</td>\n      <td>2</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2003</td>\n      <td>10</td>\n      <td>1272</td>\n      <td>70</td>\n      <td>1393</td>\n      <td>63</td>\n      <td>N</td>\n      <td>0</td>\n      <td>26</td>\n      <td>62</td>\n      <td>...</td>\n      <td>24</td>\n      <td>9</td>\n      <td>20</td>\n      <td>20</td>\n      <td>25</td>\n      <td>7</td>\n      <td>12</td>\n      <td>8</td>\n      <td>6</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2003</td>\n      <td>11</td>\n      <td>1266</td>\n      <td>73</td>\n      <td>1437</td>\n      <td>61</td>\n      <td>N</td>\n      <td>0</td>\n      <td>24</td>\n      <td>58</td>\n      <td>...</td>\n      <td>26</td>\n      <td>14</td>\n      <td>23</td>\n      <td>31</td>\n      <td>22</td>\n      <td>9</td>\n      <td>12</td>\n      <td>2</td>\n      <td>5</td>\n      <td>23</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2003</td>\n      <td>11</td>\n      <td>1296</td>\n      <td>56</td>\n      <td>1457</td>\n      <td>50</td>\n      <td>N</td>\n      <td>0</td>\n      <td>18</td>\n      <td>38</td>\n      <td>...</td>\n      <td>22</td>\n      <td>8</td>\n      <td>15</td>\n      <td>17</td>\n      <td>20</td>\n      <td>9</td>\n      <td>19</td>\n      <td>4</td>\n      <td>3</td>\n      <td>23</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2003</td>\n      <td>11</td>\n      <td>1400</td>\n      <td>77</td>\n      <td>1208</td>\n      <td>71</td>\n      <td>N</td>\n      <td>0</td>\n      <td>30</td>\n      <td>61</td>\n      <td>...</td>\n      <td>16</td>\n      <td>17</td>\n      <td>27</td>\n      <td>21</td>\n      <td>15</td>\n      <td>12</td>\n      <td>10</td>\n      <td>7</td>\n      <td>1</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>118877</th>\n      <td>2025</td>\n      <td>132</td>\n      <td>1196</td>\n      <td>86</td>\n      <td>1397</td>\n      <td>77</td>\n      <td>N</td>\n      <td>0</td>\n      <td>26</td>\n      <td>61</td>\n      <td>...</td>\n      <td>26</td>\n      <td>25</td>\n      <td>32</td>\n      <td>5</td>\n      <td>20</td>\n      <td>15</td>\n      <td>9</td>\n      <td>7</td>\n      <td>5</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>118878</th>\n      <td>2025</td>\n      <td>132</td>\n      <td>1272</td>\n      <td>84</td>\n      <td>1412</td>\n      <td>72</td>\n      <td>N</td>\n      <td>0</td>\n      <td>32</td>\n      <td>68</td>\n      <td>...</td>\n      <td>27</td>\n      <td>17</td>\n      <td>23</td>\n      <td>21</td>\n      <td>23</td>\n      <td>10</td>\n      <td>15</td>\n      <td>5</td>\n      <td>4</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>118879</th>\n      <td>2025</td>\n      <td>132</td>\n      <td>1276</td>\n      <td>59</td>\n      <td>1458</td>\n      <td>53</td>\n      <td>N</td>\n      <td>0</td>\n      <td>19</td>\n      <td>59</td>\n      <td>...</td>\n      <td>39</td>\n      <td>16</td>\n      <td>18</td>\n      <td>15</td>\n      <td>31</td>\n      <td>8</td>\n      <td>6</td>\n      <td>3</td>\n      <td>2</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>118880</th>\n      <td>2025</td>\n      <td>132</td>\n      <td>1433</td>\n      <td>68</td>\n      <td>1206</td>\n      <td>63</td>\n      <td>N</td>\n      <td>0</td>\n      <td>19</td>\n      <td>47</td>\n      <td>...</td>\n      <td>21</td>\n      <td>16</td>\n      <td>19</td>\n      <td>14</td>\n      <td>19</td>\n      <td>13</td>\n      <td>11</td>\n      <td>11</td>\n      <td>3</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>118881</th>\n      <td>2025</td>\n      <td>132</td>\n      <td>1463</td>\n      <td>90</td>\n      <td>1165</td>\n      <td>84</td>\n      <td>N</td>\n      <td>0</td>\n      <td>31</td>\n      <td>62</td>\n      <td>...</td>\n      <td>27</td>\n      <td>15</td>\n      <td>16</td>\n      <td>4</td>\n      <td>26</td>\n      <td>15</td>\n      <td>11</td>\n      <td>2</td>\n      <td>2</td>\n      <td>16</td>\n    </tr>\n  </tbody>\n</table>\n<p>118882 rows × 34 columns</p>\n</div>"},"metadata":{}}],"execution_count":112},{"cell_type":"code","source":"MNCAATourneyDetailedResults","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:07:58.205315Z","iopub.execute_input":"2025-03-18T20:07:58.205721Z","iopub.status.idle":"2025-03-18T20:07:58.22486Z","shell.execute_reply.started":"2025-03-18T20:07:58.205689Z","shell.execute_reply":"2025-03-18T20:07:58.223927Z"}},"outputs":[{"execution_count":113,"output_type":"execute_result","data":{"text/plain":"      Season  DayNum  WTeamID  WScore  LTeamID  LScore WLoc  NumOT  WFGM  \\\n0       2003     134     1421      92     1411      84    N      1    32   \n1       2003     136     1112      80     1436      51    N      0    31   \n2       2003     136     1113      84     1272      71    N      0    31   \n3       2003     136     1141      79     1166      73    N      0    29   \n4       2003     136     1143      76     1301      74    N      1    27   \n...      ...     ...      ...     ...      ...     ...  ...    ...   ...   \n1377    2024     146     1301      76     1181      64    N      0    28   \n1378    2024     146     1345      72     1397      66    N      0    24   \n1379    2024     152     1163      86     1104      72    N      0    31   \n1380    2024     152     1345      63     1301      50    N      0    22   \n1381    2024     154     1163      75     1345      60    N      0    30   \n\n      WFGA  ...  LFGA3  LFTM  LFTA  LOR  LDR  LAst  LTO  LStl  LBlk  LPF  \n0       69  ...     31    14    31   17   28    16   15     5     0   22  \n1       66  ...     16     7     7    8   26    12   17    10     3   15  \n2       59  ...     28    14    21   20   22    11   12     2     5   18  \n3       53  ...     17    12    17   14   17    20   21     6     6   21  \n4       64  ...     21    15    20   10   26    16   14     5     8   19  \n...    ...  ...    ...   ...   ...  ...  ...   ...  ...   ...   ...  ...  \n1377    60  ...     20    21    26   10   27    11    9     4     5   23  \n1378    53  ...     26     7    11    6   17    17    6     8     4   25  \n1379    62  ...     23     9    11    7   21     9    7     2     5   15  \n1380    55  ...     19     3     4    6   22    10   11     8     3   13  \n1381    62  ...      7    11    15    8   19     8    9     3     3   15  \n\n[1382 rows x 34 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Season</th>\n      <th>DayNum</th>\n      <th>WTeamID</th>\n      <th>WScore</th>\n      <th>LTeamID</th>\n      <th>LScore</th>\n      <th>WLoc</th>\n      <th>NumOT</th>\n      <th>WFGM</th>\n      <th>WFGA</th>\n      <th>...</th>\n      <th>LFGA3</th>\n      <th>LFTM</th>\n      <th>LFTA</th>\n      <th>LOR</th>\n      <th>LDR</th>\n      <th>LAst</th>\n      <th>LTO</th>\n      <th>LStl</th>\n      <th>LBlk</th>\n      <th>LPF</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2003</td>\n      <td>134</td>\n      <td>1421</td>\n      <td>92</td>\n      <td>1411</td>\n      <td>84</td>\n      <td>N</td>\n      <td>1</td>\n      <td>32</td>\n      <td>69</td>\n      <td>...</td>\n      <td>31</td>\n      <td>14</td>\n      <td>31</td>\n      <td>17</td>\n      <td>28</td>\n      <td>16</td>\n      <td>15</td>\n      <td>5</td>\n      <td>0</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2003</td>\n      <td>136</td>\n      <td>1112</td>\n      <td>80</td>\n      <td>1436</td>\n      <td>51</td>\n      <td>N</td>\n      <td>0</td>\n      <td>31</td>\n      <td>66</td>\n      <td>...</td>\n      <td>16</td>\n      <td>7</td>\n      <td>7</td>\n      <td>8</td>\n      <td>26</td>\n      <td>12</td>\n      <td>17</td>\n      <td>10</td>\n      <td>3</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2003</td>\n      <td>136</td>\n      <td>1113</td>\n      <td>84</td>\n      <td>1272</td>\n      <td>71</td>\n      <td>N</td>\n      <td>0</td>\n      <td>31</td>\n      <td>59</td>\n      <td>...</td>\n      <td>28</td>\n      <td>14</td>\n      <td>21</td>\n      <td>20</td>\n      <td>22</td>\n      <td>11</td>\n      <td>12</td>\n      <td>2</td>\n      <td>5</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2003</td>\n      <td>136</td>\n      <td>1141</td>\n      <td>79</td>\n      <td>1166</td>\n      <td>73</td>\n      <td>N</td>\n      <td>0</td>\n      <td>29</td>\n      <td>53</td>\n      <td>...</td>\n      <td>17</td>\n      <td>12</td>\n      <td>17</td>\n      <td>14</td>\n      <td>17</td>\n      <td>20</td>\n      <td>21</td>\n      <td>6</td>\n      <td>6</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2003</td>\n      <td>136</td>\n      <td>1143</td>\n      <td>76</td>\n      <td>1301</td>\n      <td>74</td>\n      <td>N</td>\n      <td>1</td>\n      <td>27</td>\n      <td>64</td>\n      <td>...</td>\n      <td>21</td>\n      <td>15</td>\n      <td>20</td>\n      <td>10</td>\n      <td>26</td>\n      <td>16</td>\n      <td>14</td>\n      <td>5</td>\n      <td>8</td>\n      <td>19</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1377</th>\n      <td>2024</td>\n      <td>146</td>\n      <td>1301</td>\n      <td>76</td>\n      <td>1181</td>\n      <td>64</td>\n      <td>N</td>\n      <td>0</td>\n      <td>28</td>\n      <td>60</td>\n      <td>...</td>\n      <td>20</td>\n      <td>21</td>\n      <td>26</td>\n      <td>10</td>\n      <td>27</td>\n      <td>11</td>\n      <td>9</td>\n      <td>4</td>\n      <td>5</td>\n      <td>23</td>\n    </tr>\n    <tr>\n      <th>1378</th>\n      <td>2024</td>\n      <td>146</td>\n      <td>1345</td>\n      <td>72</td>\n      <td>1397</td>\n      <td>66</td>\n      <td>N</td>\n      <td>0</td>\n      <td>24</td>\n      <td>53</td>\n      <td>...</td>\n      <td>26</td>\n      <td>7</td>\n      <td>11</td>\n      <td>6</td>\n      <td>17</td>\n      <td>17</td>\n      <td>6</td>\n      <td>8</td>\n      <td>4</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>1379</th>\n      <td>2024</td>\n      <td>152</td>\n      <td>1163</td>\n      <td>86</td>\n      <td>1104</td>\n      <td>72</td>\n      <td>N</td>\n      <td>0</td>\n      <td>31</td>\n      <td>62</td>\n      <td>...</td>\n      <td>23</td>\n      <td>9</td>\n      <td>11</td>\n      <td>7</td>\n      <td>21</td>\n      <td>9</td>\n      <td>7</td>\n      <td>2</td>\n      <td>5</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>1380</th>\n      <td>2024</td>\n      <td>152</td>\n      <td>1345</td>\n      <td>63</td>\n      <td>1301</td>\n      <td>50</td>\n      <td>N</td>\n      <td>0</td>\n      <td>22</td>\n      <td>55</td>\n      <td>...</td>\n      <td>19</td>\n      <td>3</td>\n      <td>4</td>\n      <td>6</td>\n      <td>22</td>\n      <td>10</td>\n      <td>11</td>\n      <td>8</td>\n      <td>3</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>1381</th>\n      <td>2024</td>\n      <td>154</td>\n      <td>1163</td>\n      <td>75</td>\n      <td>1345</td>\n      <td>60</td>\n      <td>N</td>\n      <td>0</td>\n      <td>30</td>\n      <td>62</td>\n      <td>...</td>\n      <td>7</td>\n      <td>11</td>\n      <td>15</td>\n      <td>8</td>\n      <td>19</td>\n      <td>8</td>\n      <td>9</td>\n      <td>3</td>\n      <td>3</td>\n      <td>15</td>\n    </tr>\n  </tbody>\n</table>\n<p>1382 rows × 34 columns</p>\n</div>"},"metadata":{}}],"execution_count":113},{"cell_type":"code","source":"MRegularSeasonDetailedResults['istourney'] = 0\nMNCAATourneyDetailedResults['istourney'] = 1","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:07:58.505002Z","iopub.execute_input":"2025-03-18T20:07:58.505447Z","iopub.status.idle":"2025-03-18T20:07:58.511093Z","shell.execute_reply.started":"2025-03-18T20:07:58.505412Z","shell.execute_reply":"2025-03-18T20:07:58.510088Z"}},"outputs":[],"execution_count":114},{"cell_type":"code","source":"MDetailedResults = pd.concat([MRegularSeasonDetailedResults, MNCAATourneyDetailedResults])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:07:59.255258Z","iopub.execute_input":"2025-03-18T20:07:59.255713Z","iopub.status.idle":"2025-03-18T20:07:59.269475Z","shell.execute_reply.started":"2025-03-18T20:07:59.255674Z","shell.execute_reply":"2025-03-18T20:07:59.268233Z"}},"outputs":[],"execution_count":115},{"cell_type":"code","source":"MDetailedResults.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:07:59.630812Z","iopub.execute_input":"2025-03-18T20:07:59.631135Z","iopub.status.idle":"2025-03-18T20:07:59.64721Z","shell.execute_reply.started":"2025-03-18T20:07:59.631111Z","shell.execute_reply":"2025-03-18T20:07:59.646369Z"}},"outputs":[{"execution_count":116,"output_type":"execute_result","data":{"text/plain":"   Season  DayNum  WTeamID  WScore  LTeamID  LScore WLoc  NumOT  WFGM  WFGA  \\\n0    2003      10     1104      68     1328      62    N      0    27    58   \n1    2003      10     1272      70     1393      63    N      0    26    62   \n2    2003      11     1266      73     1437      61    N      0    24    58   \n3    2003      11     1296      56     1457      50    N      0    18    38   \n4    2003      11     1400      77     1208      71    N      0    30    61   \n\n   ...  LFTM  LFTA  LOR  LDR  LAst  LTO  LStl  LBlk  LPF  istourney  \n0  ...    16    22   10   22     8   18     9     2   20          0  \n1  ...     9    20   20   25     7   12     8     6   16          0  \n2  ...    14    23   31   22     9   12     2     5   23          0  \n3  ...     8    15   17   20     9   19     4     3   23          0  \n4  ...    17    27   21   15    12   10     7     1   14          0  \n\n[5 rows x 35 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Season</th>\n      <th>DayNum</th>\n      <th>WTeamID</th>\n      <th>WScore</th>\n      <th>LTeamID</th>\n      <th>LScore</th>\n      <th>WLoc</th>\n      <th>NumOT</th>\n      <th>WFGM</th>\n      <th>WFGA</th>\n      <th>...</th>\n      <th>LFTM</th>\n      <th>LFTA</th>\n      <th>LOR</th>\n      <th>LDR</th>\n      <th>LAst</th>\n      <th>LTO</th>\n      <th>LStl</th>\n      <th>LBlk</th>\n      <th>LPF</th>\n      <th>istourney</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2003</td>\n      <td>10</td>\n      <td>1104</td>\n      <td>68</td>\n      <td>1328</td>\n      <td>62</td>\n      <td>N</td>\n      <td>0</td>\n      <td>27</td>\n      <td>58</td>\n      <td>...</td>\n      <td>16</td>\n      <td>22</td>\n      <td>10</td>\n      <td>22</td>\n      <td>8</td>\n      <td>18</td>\n      <td>9</td>\n      <td>2</td>\n      <td>20</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2003</td>\n      <td>10</td>\n      <td>1272</td>\n      <td>70</td>\n      <td>1393</td>\n      <td>63</td>\n      <td>N</td>\n      <td>0</td>\n      <td>26</td>\n      <td>62</td>\n      <td>...</td>\n      <td>9</td>\n      <td>20</td>\n      <td>20</td>\n      <td>25</td>\n      <td>7</td>\n      <td>12</td>\n      <td>8</td>\n      <td>6</td>\n      <td>16</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2003</td>\n      <td>11</td>\n      <td>1266</td>\n      <td>73</td>\n      <td>1437</td>\n      <td>61</td>\n      <td>N</td>\n      <td>0</td>\n      <td>24</td>\n      <td>58</td>\n      <td>...</td>\n      <td>14</td>\n      <td>23</td>\n      <td>31</td>\n      <td>22</td>\n      <td>9</td>\n      <td>12</td>\n      <td>2</td>\n      <td>5</td>\n      <td>23</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2003</td>\n      <td>11</td>\n      <td>1296</td>\n      <td>56</td>\n      <td>1457</td>\n      <td>50</td>\n      <td>N</td>\n      <td>0</td>\n      <td>18</td>\n      <td>38</td>\n      <td>...</td>\n      <td>8</td>\n      <td>15</td>\n      <td>17</td>\n      <td>20</td>\n      <td>9</td>\n      <td>19</td>\n      <td>4</td>\n      <td>3</td>\n      <td>23</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2003</td>\n      <td>11</td>\n      <td>1400</td>\n      <td>77</td>\n      <td>1208</td>\n      <td>71</td>\n      <td>N</td>\n      <td>0</td>\n      <td>30</td>\n      <td>61</td>\n      <td>...</td>\n      <td>17</td>\n      <td>27</td>\n      <td>21</td>\n      <td>15</td>\n      <td>12</td>\n      <td>10</td>\n      <td>7</td>\n      <td>1</td>\n      <td>14</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 35 columns</p>\n</div>"},"metadata":{}}],"execution_count":116},{"cell_type":"code","source":"MDetailedResults.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:08:00.07776Z","iopub.execute_input":"2025-03-18T20:08:00.078117Z","iopub.status.idle":"2025-03-18T20:08:00.084292Z","shell.execute_reply.started":"2025-03-18T20:08:00.078086Z","shell.execute_reply":"2025-03-18T20:08:00.083262Z"}},"outputs":[{"execution_count":117,"output_type":"execute_result","data":{"text/plain":"Index(['Season', 'DayNum', 'WTeamID', 'WScore', 'LTeamID', 'LScore', 'WLoc',\n       'NumOT', 'WFGM', 'WFGA', 'WFGM3', 'WFGA3', 'WFTM', 'WFTA', 'WOR', 'WDR',\n       'WAst', 'WTO', 'WStl', 'WBlk', 'WPF', 'LFGM', 'LFGA', 'LFGM3', 'LFGA3',\n       'LFTM', 'LFTA', 'LOR', 'LDR', 'LAst', 'LTO', 'LStl', 'LBlk', 'LPF',\n       'istourney'],\n      dtype='object')"},"metadata":{}}],"execution_count":117},{"cell_type":"code","source":"MNCAATourneySeeds","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:08:02.160809Z","iopub.execute_input":"2025-03-18T20:08:02.161162Z","iopub.status.idle":"2025-03-18T20:08:02.172204Z","shell.execute_reply.started":"2025-03-18T20:08:02.161131Z","shell.execute_reply":"2025-03-18T20:08:02.170979Z"}},"outputs":[{"execution_count":118,"output_type":"execute_result","data":{"text/plain":"      Season Seed  TeamID\n0       1985  W01    1207\n1       1985  W02    1210\n2       1985  W03    1228\n3       1985  W04    1260\n4       1985  W05    1374\n...      ...  ...     ...\n2621    2025  Z12    1161\n2622    2025  Z13    1213\n2623    2025  Z14    1423\n2624    2025  Z15    1303\n2625    2025  Z16    1313\n\n[2626 rows x 3 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Season</th>\n      <th>Seed</th>\n      <th>TeamID</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1985</td>\n      <td>W01</td>\n      <td>1207</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1985</td>\n      <td>W02</td>\n      <td>1210</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1985</td>\n      <td>W03</td>\n      <td>1228</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1985</td>\n      <td>W04</td>\n      <td>1260</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1985</td>\n      <td>W05</td>\n      <td>1374</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2621</th>\n      <td>2025</td>\n      <td>Z12</td>\n      <td>1161</td>\n    </tr>\n    <tr>\n      <th>2622</th>\n      <td>2025</td>\n      <td>Z13</td>\n      <td>1213</td>\n    </tr>\n    <tr>\n      <th>2623</th>\n      <td>2025</td>\n      <td>Z14</td>\n      <td>1423</td>\n    </tr>\n    <tr>\n      <th>2624</th>\n      <td>2025</td>\n      <td>Z15</td>\n      <td>1303</td>\n    </tr>\n    <tr>\n      <th>2625</th>\n      <td>2025</td>\n      <td>Z16</td>\n      <td>1313</td>\n    </tr>\n  </tbody>\n</table>\n<p>2626 rows × 3 columns</p>\n</div>"},"metadata":{}}],"execution_count":118},{"cell_type":"code","source":"MNCAATourneySeeds = MNCAATourneySeeds[MNCAATourneySeeds['Season'] > 2002]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:08:02.45174Z","iopub.execute_input":"2025-03-18T20:08:02.452061Z","iopub.status.idle":"2025-03-18T20:08:02.458271Z","shell.execute_reply.started":"2025-03-18T20:08:02.452036Z","shell.execute_reply":"2025-03-18T20:08:02.457313Z"}},"outputs":[],"execution_count":119},{"cell_type":"code","source":"MNCAATourneySeeds","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:08:02.80475Z","iopub.execute_input":"2025-03-18T20:08:02.805212Z","iopub.status.idle":"2025-03-18T20:08:02.818038Z","shell.execute_reply.started":"2025-03-18T20:08:02.805154Z","shell.execute_reply":"2025-03-18T20:08:02.81698Z"}},"outputs":[{"execution_count":120,"output_type":"execute_result","data":{"text/plain":"      Season Seed  TeamID\n1154    2003  W01    1328\n1155    2003  W02    1448\n1156    2003  W03    1393\n1157    2003  W04    1257\n1158    2003  W05    1280\n...      ...  ...     ...\n2621    2025  Z12    1161\n2622    2025  Z13    1213\n2623    2025  Z14    1423\n2624    2025  Z15    1303\n2625    2025  Z16    1313\n\n[1472 rows x 3 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Season</th>\n      <th>Seed</th>\n      <th>TeamID</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1154</th>\n      <td>2003</td>\n      <td>W01</td>\n      <td>1328</td>\n    </tr>\n    <tr>\n      <th>1155</th>\n      <td>2003</td>\n      <td>W02</td>\n      <td>1448</td>\n    </tr>\n    <tr>\n      <th>1156</th>\n      <td>2003</td>\n      <td>W03</td>\n      <td>1393</td>\n    </tr>\n    <tr>\n      <th>1157</th>\n      <td>2003</td>\n      <td>W04</td>\n      <td>1257</td>\n    </tr>\n    <tr>\n      <th>1158</th>\n      <td>2003</td>\n      <td>W05</td>\n      <td>1280</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2621</th>\n      <td>2025</td>\n      <td>Z12</td>\n      <td>1161</td>\n    </tr>\n    <tr>\n      <th>2622</th>\n      <td>2025</td>\n      <td>Z13</td>\n      <td>1213</td>\n    </tr>\n    <tr>\n      <th>2623</th>\n      <td>2025</td>\n      <td>Z14</td>\n      <td>1423</td>\n    </tr>\n    <tr>\n      <th>2624</th>\n      <td>2025</td>\n      <td>Z15</td>\n      <td>1303</td>\n    </tr>\n    <tr>\n      <th>2625</th>\n      <td>2025</td>\n      <td>Z16</td>\n      <td>1313</td>\n    </tr>\n  </tbody>\n</table>\n<p>1472 rows × 3 columns</p>\n</div>"},"metadata":{}}],"execution_count":120},{"cell_type":"code","source":"df_men = MDetailedResults.copy()  # has WTeamID, LTeamID, etc.\ndf_teams = MTeams[['TeamID', 'TeamName']]          # just the columns you need\n\n# Merge on WTeamID first\ndf_men = (\n    df_men.merge(df_teams, how='left',\n                     left_on='WTeamID', right_on='TeamID')\n    .rename(columns={'TeamName': 'WTeamName'})\n    .drop('TeamID', axis=1)\n)\n\n# Merge on LTeamID next\ndf_men = (\n    df_men.merge(df_teams, how='left',\n                     left_on='LTeamID', right_on='TeamID')\n    .rename(columns={'TeamName': 'LTeamName'})\n    .drop('TeamID', axis=1)\n)\n\ndf_men.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:08:03.683308Z","iopub.execute_input":"2025-03-18T20:08:03.683658Z","iopub.status.idle":"2025-03-18T20:08:03.853793Z","shell.execute_reply.started":"2025-03-18T20:08:03.683632Z","shell.execute_reply":"2025-03-18T20:08:03.852707Z"}},"outputs":[{"execution_count":121,"output_type":"execute_result","data":{"text/plain":"   Season  DayNum  WTeamID  WScore  LTeamID  LScore WLoc  NumOT  WFGM  WFGA  \\\n0    2003      10     1104      68     1328      62    N      0    27    58   \n1    2003      10     1272      70     1393      63    N      0    26    62   \n2    2003      11     1266      73     1437      61    N      0    24    58   \n3    2003      11     1296      56     1457      50    N      0    18    38   \n4    2003      11     1400      77     1208      71    N      0    30    61   \n\n   ...  LOR  LDR  LAst  LTO  LStl  LBlk  LPF  istourney   WTeamName  LTeamName  \n0  ...   10   22     8   18     9     2   20          0     Alabama   Oklahoma  \n1  ...   20   25     7   12     8     6   16          0     Memphis   Syracuse  \n2  ...   31   22     9   12     2     5   23          0   Marquette  Villanova  \n3  ...   17   20     9   19     4     3   23          0  N Illinois   Winthrop  \n4  ...   21   15    12   10     7     1   14          0       Texas    Georgia  \n\n[5 rows x 37 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Season</th>\n      <th>DayNum</th>\n      <th>WTeamID</th>\n      <th>WScore</th>\n      <th>LTeamID</th>\n      <th>LScore</th>\n      <th>WLoc</th>\n      <th>NumOT</th>\n      <th>WFGM</th>\n      <th>WFGA</th>\n      <th>...</th>\n      <th>LOR</th>\n      <th>LDR</th>\n      <th>LAst</th>\n      <th>LTO</th>\n      <th>LStl</th>\n      <th>LBlk</th>\n      <th>LPF</th>\n      <th>istourney</th>\n      <th>WTeamName</th>\n      <th>LTeamName</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2003</td>\n      <td>10</td>\n      <td>1104</td>\n      <td>68</td>\n      <td>1328</td>\n      <td>62</td>\n      <td>N</td>\n      <td>0</td>\n      <td>27</td>\n      <td>58</td>\n      <td>...</td>\n      <td>10</td>\n      <td>22</td>\n      <td>8</td>\n      <td>18</td>\n      <td>9</td>\n      <td>2</td>\n      <td>20</td>\n      <td>0</td>\n      <td>Alabama</td>\n      <td>Oklahoma</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2003</td>\n      <td>10</td>\n      <td>1272</td>\n      <td>70</td>\n      <td>1393</td>\n      <td>63</td>\n      <td>N</td>\n      <td>0</td>\n      <td>26</td>\n      <td>62</td>\n      <td>...</td>\n      <td>20</td>\n      <td>25</td>\n      <td>7</td>\n      <td>12</td>\n      <td>8</td>\n      <td>6</td>\n      <td>16</td>\n      <td>0</td>\n      <td>Memphis</td>\n      <td>Syracuse</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2003</td>\n      <td>11</td>\n      <td>1266</td>\n      <td>73</td>\n      <td>1437</td>\n      <td>61</td>\n      <td>N</td>\n      <td>0</td>\n      <td>24</td>\n      <td>58</td>\n      <td>...</td>\n      <td>31</td>\n      <td>22</td>\n      <td>9</td>\n      <td>12</td>\n      <td>2</td>\n      <td>5</td>\n      <td>23</td>\n      <td>0</td>\n      <td>Marquette</td>\n      <td>Villanova</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2003</td>\n      <td>11</td>\n      <td>1296</td>\n      <td>56</td>\n      <td>1457</td>\n      <td>50</td>\n      <td>N</td>\n      <td>0</td>\n      <td>18</td>\n      <td>38</td>\n      <td>...</td>\n      <td>17</td>\n      <td>20</td>\n      <td>9</td>\n      <td>19</td>\n      <td>4</td>\n      <td>3</td>\n      <td>23</td>\n      <td>0</td>\n      <td>N Illinois</td>\n      <td>Winthrop</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2003</td>\n      <td>11</td>\n      <td>1400</td>\n      <td>77</td>\n      <td>1208</td>\n      <td>71</td>\n      <td>N</td>\n      <td>0</td>\n      <td>30</td>\n      <td>61</td>\n      <td>...</td>\n      <td>21</td>\n      <td>15</td>\n      <td>12</td>\n      <td>10</td>\n      <td>7</td>\n      <td>1</td>\n      <td>14</td>\n      <td>0</td>\n      <td>Texas</td>\n      <td>Georgia</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 37 columns</p>\n</div>"},"metadata":{}}],"execution_count":121},{"cell_type":"code","source":"import pandas as pd\n\n# --- Example setup ---\n# MDetailedResults has columns like:\n#   Season, DayNum, WTeamID, WScore, LTeamID, LScore, ...\n# MNCAATourneySeeds has columns like:\n#   Season, Seed, TeamID\n\n# 1) Merge WSeed\ntmp_w = MNCAATourneySeeds[['Season','TeamID','Seed']] \\\n            .rename(columns={'TeamID': 'WTeamID', 'Seed': 'WSeed'})\ndf_merged = MDetailedResults.merge(\n    tmp_w,\n    on=['Season','WTeamID'],\n    how='left'\n)\n\n# 2) Merge LSeed\ntmp_l = MNCAATourneySeeds[['Season','TeamID','Seed']] \\\n            .rename(columns={'TeamID': 'LTeamID', 'Seed': 'LSeed'})\ndf_merged = df_merged.merge(\n    tmp_l,\n    on=['Season','LTeamID'],\n    how='left'\n)\n\n# Suppose you already have is_tourney=1 for tourney games, 0 otherwise\ndf_merged.loc[df_merged['istourney'] == 0, ['WSeed','LSeed']] = pd.NA\n\n\n# df_merged now has MDetailedResults plus two new columns: WSeed and LSeed.\n# Regular-season rows (or teams that never got a seed) will have NaN in WSeed/LSeed.\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:08:05.974653Z","iopub.execute_input":"2025-03-18T20:08:05.974978Z","iopub.status.idle":"2025-03-18T20:08:06.06224Z","shell.execute_reply.started":"2025-03-18T20:08:05.974953Z","shell.execute_reply":"2025-03-18T20:08:06.06133Z"}},"outputs":[],"execution_count":122},{"cell_type":"code","source":"df_merged.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:08:08.193295Z","iopub.execute_input":"2025-03-18T20:08:08.193707Z","iopub.status.idle":"2025-03-18T20:08:08.209748Z","shell.execute_reply.started":"2025-03-18T20:08:08.193678Z","shell.execute_reply":"2025-03-18T20:08:08.208607Z"}},"outputs":[{"execution_count":123,"output_type":"execute_result","data":{"text/plain":"   Season  DayNum  WTeamID  WScore  LTeamID  LScore WLoc  NumOT  WFGM  WFGA  \\\n0    2003      10     1104      68     1328      62    N      0    27    58   \n1    2003      10     1272      70     1393      63    N      0    26    62   \n2    2003      11     1266      73     1437      61    N      0    24    58   \n3    2003      11     1296      56     1457      50    N      0    18    38   \n4    2003      11     1400      77     1208      71    N      0    30    61   \n\n   ...  LOR  LDR  LAst  LTO  LStl  LBlk  LPF  istourney  WSeed  LSeed  \n0  ...   10   22     8   18     9     2   20          0   <NA>   <NA>  \n1  ...   20   25     7   12     8     6   16          0   <NA>   <NA>  \n2  ...   31   22     9   12     2     5   23          0   <NA>   <NA>  \n3  ...   17   20     9   19     4     3   23          0   <NA>   <NA>  \n4  ...   21   15    12   10     7     1   14          0   <NA>   <NA>  \n\n[5 rows x 37 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Season</th>\n      <th>DayNum</th>\n      <th>WTeamID</th>\n      <th>WScore</th>\n      <th>LTeamID</th>\n      <th>LScore</th>\n      <th>WLoc</th>\n      <th>NumOT</th>\n      <th>WFGM</th>\n      <th>WFGA</th>\n      <th>...</th>\n      <th>LOR</th>\n      <th>LDR</th>\n      <th>LAst</th>\n      <th>LTO</th>\n      <th>LStl</th>\n      <th>LBlk</th>\n      <th>LPF</th>\n      <th>istourney</th>\n      <th>WSeed</th>\n      <th>LSeed</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2003</td>\n      <td>10</td>\n      <td>1104</td>\n      <td>68</td>\n      <td>1328</td>\n      <td>62</td>\n      <td>N</td>\n      <td>0</td>\n      <td>27</td>\n      <td>58</td>\n      <td>...</td>\n      <td>10</td>\n      <td>22</td>\n      <td>8</td>\n      <td>18</td>\n      <td>9</td>\n      <td>2</td>\n      <td>20</td>\n      <td>0</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2003</td>\n      <td>10</td>\n      <td>1272</td>\n      <td>70</td>\n      <td>1393</td>\n      <td>63</td>\n      <td>N</td>\n      <td>0</td>\n      <td>26</td>\n      <td>62</td>\n      <td>...</td>\n      <td>20</td>\n      <td>25</td>\n      <td>7</td>\n      <td>12</td>\n      <td>8</td>\n      <td>6</td>\n      <td>16</td>\n      <td>0</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2003</td>\n      <td>11</td>\n      <td>1266</td>\n      <td>73</td>\n      <td>1437</td>\n      <td>61</td>\n      <td>N</td>\n      <td>0</td>\n      <td>24</td>\n      <td>58</td>\n      <td>...</td>\n      <td>31</td>\n      <td>22</td>\n      <td>9</td>\n      <td>12</td>\n      <td>2</td>\n      <td>5</td>\n      <td>23</td>\n      <td>0</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2003</td>\n      <td>11</td>\n      <td>1296</td>\n      <td>56</td>\n      <td>1457</td>\n      <td>50</td>\n      <td>N</td>\n      <td>0</td>\n      <td>18</td>\n      <td>38</td>\n      <td>...</td>\n      <td>17</td>\n      <td>20</td>\n      <td>9</td>\n      <td>19</td>\n      <td>4</td>\n      <td>3</td>\n      <td>23</td>\n      <td>0</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2003</td>\n      <td>11</td>\n      <td>1400</td>\n      <td>77</td>\n      <td>1208</td>\n      <td>71</td>\n      <td>N</td>\n      <td>0</td>\n      <td>30</td>\n      <td>61</td>\n      <td>...</td>\n      <td>21</td>\n      <td>15</td>\n      <td>12</td>\n      <td>10</td>\n      <td>7</td>\n      <td>1</td>\n      <td>14</td>\n      <td>0</td>\n      <td>&lt;NA&gt;</td>\n      <td>&lt;NA&gt;</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 37 columns</p>\n</div>"},"metadata":{}}],"execution_count":123},{"cell_type":"markdown","source":"## Now let us generate an ELO column for each team.","metadata":{}},{"cell_type":"code","source":"df = df_merged.copy()  # e.g., your merged Detailed Results with Team Names","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:08:08.768509Z","iopub.execute_input":"2025-03-18T20:08:08.768845Z","iopub.status.idle":"2025-03-18T20:08:08.785156Z","shell.execute_reply.started":"2025-03-18T20:08:08.768819Z","shell.execute_reply":"2025-03-18T20:08:08.783911Z"}},"outputs":[],"execution_count":124},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\ndef add_elo_features_with_rolling_momentum(\n    df, \n    base_elo=1500, \n    k_factor=20,\n    last_reg_day=132  # Usually Selection Sunday for men\n):\n    \"\"\"\n    Computes Elo and related features, then creates a rolling 'momentum'\n    measure. Specifically:\n      - WTeamEloBefore, LTeamEloBefore: Elo prior to each game\n      - WTeamEloAfter,  LTeamEloAfter:  Elo right after each game\n      - WTeamEloDelta,  LTeamEloDelta:  how much Elo changed in that game (first derivative)\n      - WTeamEloDelta2, LTeamEloDelta2: change-of-change in Elo (second derivative)\n      - (Optional) final regular-season Elo columns for each team\n      - 'elo_minus_seedAvgElo' for how each team compares to the average Elo of its seed\n      - A rolling average momentum measure based on EloDelta over a 5-game window (you can adjust)\n    \"\"\"\n\n    # Make a copy so we don't modify the original df in-place\n    df = df.copy()\n    \n    # Sort by (Season, DayNum) to process games in chronological order\n    df = df.sort_values(by=[\"Season\", \"DayNum\"]).reset_index(drop=True)\n    \n    # We'll keep a dictionary of current ELO for each (season, team)\n    current_elo = {}\n    # Also track the last Elo & last Delta for each team, so we can get the second derivative\n    last_elo = {}\n    last_delta = {}\n    \n    # Create new columns to store ELO features in the main df\n    df[\"WTeamEloBefore\"] = np.nan\n    df[\"LTeamEloBefore\"] = np.nan\n    df[\"WTeamEloAfter\"] = np.nan\n    df[\"LTeamEloAfter\"] = np.nan\n\n    df[\"WTeamEloDelta\"] = np.nan\n    df[\"LTeamEloDelta\"] = np.nan\n    df[\"WTeamEloDelta2\"] = np.nan\n    df[\"LTeamEloDelta2\"] = np.nan\n\n    # 1) Walk through each row in chronological order and compute Elo\n    for i, row in df.iterrows():\n        season = row[\"Season\"]\n        wteam = row[\"WTeamID\"]\n        lteam = row[\"LTeamID\"]\n        \n        # If we haven't seen this (season, team) yet, initialize them to base_elo\n        if (season, wteam) not in current_elo:\n            current_elo[(season, wteam)] = base_elo\n            last_elo[(season, wteam)] = base_elo\n            last_delta[(season, wteam)] = 0.0\n            \n        if (season, lteam) not in current_elo:\n            current_elo[(season, lteam)] = base_elo\n            last_elo[(season, lteam)] = base_elo\n            last_delta[(season, lteam)] = 0.0\n        \n        # Get each team's pre-game Elo\n        w_elo_before = current_elo[(season, wteam)]\n        l_elo_before = current_elo[(season, lteam)]\n        \n        df.at[i, \"WTeamEloBefore\"] = w_elo_before\n        df.at[i, \"LTeamEloBefore\"] = l_elo_before\n        \n        # Calculate expected outcomes\n        exp_w = 1.0 / (1.0 + 10.0**((l_elo_before - w_elo_before) / 400.0))\n        exp_l = 1.0 - exp_w\n        \n        # Actual outcomes: winner=1, loser=0\n        score_w, score_l = 1.0, 0.0\n        \n        # New Elo\n        new_w_elo = w_elo_before + k_factor * (score_w - exp_w)\n        new_l_elo = l_elo_before + k_factor * (score_l - exp_l)\n        \n        # Calculate first derivative (Delta = new - old Elo)\n        w_delta = new_w_elo - w_elo_before\n        l_delta = new_l_elo - l_elo_before\n        \n        # Calculate second derivative (Delta2 = this Delta - previous Delta)\n        w_delta2 = w_delta - last_delta[(season, wteam)]\n        l_delta2 = l_delta - last_delta[(season, lteam)]\n        \n        df.at[i, \"WTeamEloDelta\"] = w_delta\n        df.at[i, \"LTeamEloDelta\"] = l_delta\n        df.at[i, \"WTeamEloDelta2\"] = w_delta2\n        df.at[i, \"LTeamEloDelta2\"] = l_delta2\n        \n        # Store post-game Elo\n        df.at[i, \"WTeamEloAfter\"] = new_w_elo\n        df.at[i, \"LTeamEloAfter\"] = new_l_elo\n\n        # Update running Elo and deltas\n        current_elo[(season, wteam)] = new_w_elo\n        current_elo[(season, lteam)] = new_l_elo\n        last_elo[(season, wteam)] = new_w_elo\n        last_elo[(season, lteam)] = new_l_elo\n        last_delta[(season, wteam)] = w_delta\n        last_delta[(season, lteam)] = l_delta\n    \n    # 2) (Optional) Snapshot the final \"regular-season-end Elo\" for each (season, team)\n    #    We'll filter rows with DayNum <= last_reg_day, then pick the last game played.\n    df_reg = df[df[\"DayNum\"] <= last_reg_day].copy()\n    \n    df_w = df_reg[[\"Season\",\"DayNum\",\"WTeamID\",\"WTeamEloAfter\"]].copy()\n    df_w.rename(columns={\n        \"WTeamID\": \"TeamID\", \n        \"WTeamEloAfter\": \"EloAfter\"\n    }, inplace=True)\n    \n    df_l = df_reg[[\"Season\",\"DayNum\",\"LTeamID\",\"LTeamEloAfter\"]].copy()\n    df_l.rename(columns={\n        \"LTeamID\": \"TeamID\", \n        \"LTeamEloAfter\": \"EloAfter\"\n    }, inplace=True)\n\n    df_reg_all = pd.concat([df_w, df_l], ignore_index=True)\n    df_reg_all = df_reg_all.sort_values(\"DayNum\").groupby([\"Season\",\"TeamID\"], as_index=False).last()\n    \n    # Rename EloAfter -> Elo_regSeasonEnd\n    df_reg_all.rename(columns={\"EloAfter\": \"Elo_regSeasonEnd\"}, inplace=True)\n\n    # Merge back to main df for winners and losers if you want those columns\n    df = df.merge(\n        df_reg_all[[\"Season\",\"TeamID\",\"Elo_regSeasonEnd\"]],\n        how=\"left\",\n        left_on=[\"Season\",\"WTeamID\"],\n        right_on=[\"Season\",\"TeamID\"]\n    )\n    df.rename(columns={\"Elo_regSeasonEnd\":\"WTeam_regSeasonEnd\"}, inplace=True)\n    df.drop(columns=\"TeamID\", inplace=True)\n\n    df = df.merge(\n        df_reg_all[[\"Season\",\"TeamID\",\"Elo_regSeasonEnd\"]],\n        how=\"left\",\n        left_on=[\"Season\",\"LTeamID\"],\n        right_on=[\"Season\",\"TeamID\"]\n    )\n    df.rename(columns={\"Elo_regSeasonEnd\":\"LTeam_regSeasonEnd\"}, inplace=True)\n    df.drop(columns=\"TeamID\", inplace=True)\n    \n    # 3) Build a \"long\" format DataFrame so we can compute a rolling average of EloDelta per team\n    df_wgames = df[[\n        \"Season\",\"DayNum\",\"WTeamID\",\"WTeamEloBefore\",\"WTeamEloDelta\"\n    ]].rename(columns={\n        \"WTeamID\": \"TeamID\",\n        \"WTeamEloBefore\": \"EloBefore\",\n        \"WTeamEloDelta\": \"EloDelta\"\n    })\n\n    df_lgames = df[[\n        \"Season\",\"DayNum\",\"LTeamID\",\"LTeamEloBefore\",\"LTeamEloDelta\"\n    ]].rename(columns={\n        \"LTeamID\": \"TeamID\",\n        \"LTeamEloBefore\": \"EloBefore\",\n        \"LTeamEloDelta\": \"EloDelta\"\n    })\n\n    df_long = pd.concat([df_wgames, df_lgames], ignore_index=True)\n    df_long = df_long.sort_values([\"Season\",\"TeamID\",\"DayNum\"]).reset_index(drop=True)\n\n    # 4) Compute rolling momentum (e.g., a 5-game rolling average of EloDelta).\n    #    Adjust window=5 to your liking; min_periods=1 so early games are included with partial windows.\n    df_long[\"Momentum_5\"] = df_long.groupby([\"Season\",\"TeamID\"])[\"EloDelta\"] \\\n                                   .transform(lambda x: x.rolling(window=5, min_periods=1).mean())\n\n    # 5) Merge rolling momentum back into df for winners and losers\n    df = df.merge(\n        df_long[[\"Season\",\"TeamID\",\"DayNum\",\"Momentum_5\"]],\n        how=\"left\",\n        left_on=[\"Season\",\"WTeamID\",\"DayNum\"],\n        right_on=[\"Season\",\"TeamID\",\"DayNum\"]\n    )\n    df.rename(columns={\"Momentum_5\":\"WTeamMomentum_5\"}, inplace=True)\n    df.drop(columns=\"TeamID\", inplace=True)\n\n    df = df.merge(\n        df_long[[\"Season\",\"TeamID\",\"DayNum\",\"Momentum_5\"]],\n        how=\"left\",\n        left_on=[\"Season\",\"LTeamID\",\"DayNum\"],\n        right_on=[\"Season\",\"TeamID\",\"DayNum\"]\n    )\n    df.rename(columns={\"Momentum_5\":\"LTeamMomentum_5\"}, inplace=True)\n    df.drop(columns=\"TeamID\", inplace=True)\n\n    # 6) Build \"elo_minus_seedAvgElo\" using final ELO approach from the dictionary of current_elo\n    final_elo_rows = []\n    for (season, teamid), rating in current_elo.items():\n        final_elo_rows.append({\n            \"Season\": season,\n            \"TeamID\": teamid,\n            \"finalElo\": rating\n        })\n    df_final_elo = pd.DataFrame(final_elo_rows)\n\n    # Extract unique (Season, TeamID, Seed) from the main df\n    df_seeds = pd.concat([\n        df[[\"Season\",\"WTeamID\",\"WSeed\"]].rename(columns={\"WTeamID\":\"TeamID\",\"WSeed\":\"Seed\"}),\n        df[[\"Season\",\"LTeamID\",\"LSeed\"]].rename(columns={\"LTeamID\":\"TeamID\",\"LSeed\":\"Seed\"}),\n    ], ignore_index=True)\n    df_seeds = df_seeds.dropna(subset=[\"Seed\"]).drop_duplicates(subset=[\"Season\",\"TeamID\"])\n\n    # Merge final Elo for seeded teams\n    df_seeds = df_seeds.merge(df_final_elo, on=[\"Season\",\"TeamID\"], how=\"left\")\n\n    # Compute average final Elo for each (Season, Seed)\n    df_seedavg = df_seeds.groupby([\"Season\",\"Seed\"])[\"finalElo\"].mean().reset_index()\n    df_seedavg.rename(columns={\"finalElo\":\"SeedAvgElo\"}, inplace=True)\n\n    # Merge average seed Elo\n    df_seeds = df_seeds.merge(df_seedavg, on=[\"Season\",\"Seed\"], how=\"left\")\n\n    # Build a dict for (Season, team) -> seedAvgElo\n    seed_avg_dict = {\n        (row[\"Season\"], row[\"TeamID\"]): row[\"SeedAvgElo\"]\n        for _, row in df_seeds.iterrows()\n    }\n\n    # Add columns for Elo minus seedAvgElo (pre-game Elo minus the *avg final Elo* for that seed)\n    df[\"Welo_minus_seedAvgElo\"] = np.nan\n    df[\"Lelo_minus_seedAvgElo\"] = np.nan\n\n    for i, row in df.iterrows():\n        season = row[\"Season\"]\n        wteam = row[\"WTeamID\"]\n        lteam = row[\"LTeamID\"]\n        w_seed_avg = seed_avg_dict.get((season, wteam), np.nan)\n        l_seed_avg = seed_avg_dict.get((season, lteam), np.nan)\n\n        if pd.notnull(w_seed_avg):\n            df.at[i, \"Welo_minus_seedAvgElo\"] = row[\"WTeamEloBefore\"] - w_seed_avg\n        if pd.notnull(l_seed_avg):\n            df.at[i, \"Lelo_minus_seedAvgElo\"] = row[\"LTeamEloBefore\"] - l_seed_avg\n\n    # Done! The df now has:\n    #   - Elo before/after each game\n    #   - Delta/Delta2\n    #   - (Optional) final regular-season-end Elo\n    #   - Rolling momentum measure: WTeamMomentum_5, LTeamMomentum_5\n    #   - Elo minus average seed Elo\n\n    return df\n\n\n# Example usage:\n# df_with_elo = add_elo_features_with_rolling_momentum(df, base_elo=1500, k_factor=20)\n# df_with_elo.head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:08:09.301428Z","iopub.execute_input":"2025-03-18T20:08:09.301769Z","iopub.status.idle":"2025-03-18T20:08:09.327464Z","shell.execute_reply.started":"2025-03-18T20:08:09.301743Z","shell.execute_reply":"2025-03-18T20:08:09.32629Z"}},"outputs":[],"execution_count":125},{"cell_type":"code","source":"df_with_elo = add_elo_features_with_rolling_momentum(df, base_elo=1500, k_factor = 28)\ndf_with_elo.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:08:14.391147Z","iopub.execute_input":"2025-03-18T20:08:14.391522Z","iopub.status.idle":"2025-03-18T20:08:51.690107Z","shell.execute_reply.started":"2025-03-18T20:08:14.391493Z","shell.execute_reply":"2025-03-18T20:08:51.688964Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":126,"output_type":"execute_result","data":{"text/plain":"   Season  DayNum  WTeamID  WScore  LTeamID  LScore WLoc  NumOT  WFGM  WFGA  \\\n0    2003      10     1104      68     1328      62    N      0    27    58   \n1    2003      10     1272      70     1393      63    N      0    26    62   \n2    2003      11     1266      73     1437      61    N      0    24    58   \n3    2003      11     1296      56     1457      50    N      0    18    38   \n4    2003      11     1400      77     1208      71    N      0    30    61   \n\n   ...  WTeamEloDelta  LTeamEloDelta  WTeamEloDelta2  LTeamEloDelta2  \\\n0  ...           14.0          -14.0            14.0           -14.0   \n1  ...           14.0          -14.0            14.0           -14.0   \n2  ...           14.0          -14.0            14.0           -14.0   \n3  ...           14.0          -14.0            14.0           -14.0   \n4  ...           14.0          -14.0            14.0           -14.0   \n\n   WTeam_regSeasonEnd  LTeam_regSeasonEnd  WTeamMomentum_5  LTeamMomentum_5  \\\n0         1553.109438         1700.703384             14.0            -14.0   \n1         1667.258514         1689.963909             14.0            -14.0   \n2         1682.515491         1495.977611             14.0            -14.0   \n3         1539.222161         1559.096098             14.0            -14.0   \n4         1671.766098         1647.480856             14.0            -14.0   \n\n   Welo_minus_seedAvgElo  Lelo_minus_seedAvgElo  \n0             -39.831101            -218.718179  \n1            -149.739087            -264.273135  \n2            -225.975806                    NaN  \n3                    NaN                    NaN  \n4            -201.155610                    NaN  \n\n[5 rows x 51 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Season</th>\n      <th>DayNum</th>\n      <th>WTeamID</th>\n      <th>WScore</th>\n      <th>LTeamID</th>\n      <th>LScore</th>\n      <th>WLoc</th>\n      <th>NumOT</th>\n      <th>WFGM</th>\n      <th>WFGA</th>\n      <th>...</th>\n      <th>WTeamEloDelta</th>\n      <th>LTeamEloDelta</th>\n      <th>WTeamEloDelta2</th>\n      <th>LTeamEloDelta2</th>\n      <th>WTeam_regSeasonEnd</th>\n      <th>LTeam_regSeasonEnd</th>\n      <th>WTeamMomentum_5</th>\n      <th>LTeamMomentum_5</th>\n      <th>Welo_minus_seedAvgElo</th>\n      <th>Lelo_minus_seedAvgElo</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2003</td>\n      <td>10</td>\n      <td>1104</td>\n      <td>68</td>\n      <td>1328</td>\n      <td>62</td>\n      <td>N</td>\n      <td>0</td>\n      <td>27</td>\n      <td>58</td>\n      <td>...</td>\n      <td>14.0</td>\n      <td>-14.0</td>\n      <td>14.0</td>\n      <td>-14.0</td>\n      <td>1553.109438</td>\n      <td>1700.703384</td>\n      <td>14.0</td>\n      <td>-14.0</td>\n      <td>-39.831101</td>\n      <td>-218.718179</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2003</td>\n      <td>10</td>\n      <td>1272</td>\n      <td>70</td>\n      <td>1393</td>\n      <td>63</td>\n      <td>N</td>\n      <td>0</td>\n      <td>26</td>\n      <td>62</td>\n      <td>...</td>\n      <td>14.0</td>\n      <td>-14.0</td>\n      <td>14.0</td>\n      <td>-14.0</td>\n      <td>1667.258514</td>\n      <td>1689.963909</td>\n      <td>14.0</td>\n      <td>-14.0</td>\n      <td>-149.739087</td>\n      <td>-264.273135</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2003</td>\n      <td>11</td>\n      <td>1266</td>\n      <td>73</td>\n      <td>1437</td>\n      <td>61</td>\n      <td>N</td>\n      <td>0</td>\n      <td>24</td>\n      <td>58</td>\n      <td>...</td>\n      <td>14.0</td>\n      <td>-14.0</td>\n      <td>14.0</td>\n      <td>-14.0</td>\n      <td>1682.515491</td>\n      <td>1495.977611</td>\n      <td>14.0</td>\n      <td>-14.0</td>\n      <td>-225.975806</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2003</td>\n      <td>11</td>\n      <td>1296</td>\n      <td>56</td>\n      <td>1457</td>\n      <td>50</td>\n      <td>N</td>\n      <td>0</td>\n      <td>18</td>\n      <td>38</td>\n      <td>...</td>\n      <td>14.0</td>\n      <td>-14.0</td>\n      <td>14.0</td>\n      <td>-14.0</td>\n      <td>1539.222161</td>\n      <td>1559.096098</td>\n      <td>14.0</td>\n      <td>-14.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2003</td>\n      <td>11</td>\n      <td>1400</td>\n      <td>77</td>\n      <td>1208</td>\n      <td>71</td>\n      <td>N</td>\n      <td>0</td>\n      <td>30</td>\n      <td>61</td>\n      <td>...</td>\n      <td>14.0</td>\n      <td>-14.0</td>\n      <td>14.0</td>\n      <td>-14.0</td>\n      <td>1671.766098</td>\n      <td>1647.480856</td>\n      <td>14.0</td>\n      <td>-14.0</td>\n      <td>-201.155610</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 51 columns</p>\n</div>"},"metadata":{}}],"execution_count":126},{"cell_type":"code","source":"df = df_with_elo.copy()\ndf = df.sort_values(by=[\"Season\", \"DayNum\"]).reset_index(drop=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:09:29.173604Z","iopub.execute_input":"2025-03-18T20:09:29.173963Z","iopub.status.idle":"2025-03-18T20:09:29.195943Z","shell.execute_reply.started":"2025-03-18T20:09:29.173935Z","shell.execute_reply":"2025-03-18T20:09:29.195106Z"}},"outputs":[],"execution_count":127},{"cell_type":"code","source":"df.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:09:32.04174Z","iopub.execute_input":"2025-03-18T20:09:32.0421Z","iopub.status.idle":"2025-03-18T20:09:32.048624Z","shell.execute_reply.started":"2025-03-18T20:09:32.042068Z","shell.execute_reply":"2025-03-18T20:09:32.047566Z"}},"outputs":[{"execution_count":128,"output_type":"execute_result","data":{"text/plain":"Index(['Season', 'DayNum', 'WTeamID', 'WScore', 'LTeamID', 'LScore', 'WLoc',\n       'NumOT', 'WFGM', 'WFGA', 'WFGM3', 'WFGA3', 'WFTM', 'WFTA', 'WOR', 'WDR',\n       'WAst', 'WTO', 'WStl', 'WBlk', 'WPF', 'LFGM', 'LFGA', 'LFGM3', 'LFGA3',\n       'LFTM', 'LFTA', 'LOR', 'LDR', 'LAst', 'LTO', 'LStl', 'LBlk', 'LPF',\n       'istourney', 'WSeed', 'LSeed', 'WTeamEloBefore', 'LTeamEloBefore',\n       'WTeamEloAfter', 'LTeamEloAfter', 'WTeamEloDelta', 'LTeamEloDelta',\n       'WTeamEloDelta2', 'LTeamEloDelta2', 'WTeam_regSeasonEnd',\n       'LTeam_regSeasonEnd', 'WTeamMomentum_5', 'LTeamMomentum_5',\n       'Welo_minus_seedAvgElo', 'Lelo_minus_seedAvgElo'],\n      dtype='object')"},"metadata":{}}],"execution_count":128},{"cell_type":"code","source":"df[\"WTeamEloDelta_lastGame\"] = df.groupby(\"WTeamID\")[\"WTeamEloDelta\"].shift(1)\ndf[\"LTeamEloDelta_lastGame\"] = df.groupby(\"LTeamID\")[\"LTeamEloDelta\"].shift(1)\n\ndf[\"WTeamEloDelta2_lastGame\"] = df.groupby(\"WTeamID\")[\"WTeamEloDelta2\"].shift(1)\ndf[\"LTeamEloDelta2_lastGame\"] = df.groupby(\"LTeamID\")[\"LTeamEloDelta2\"].shift(1)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:09:32.354932Z","iopub.execute_input":"2025-03-18T20:09:32.355304Z","iopub.status.idle":"2025-03-18T20:09:32.379124Z","shell.execute_reply.started":"2025-03-18T20:09:32.355273Z","shell.execute_reply":"2025-03-18T20:09:32.378155Z"}},"outputs":[],"execution_count":129},{"cell_type":"code","source":"import pandas as pd\n\ndef merge_sel_ordinals_onto_games(df_games, df_massey):\n    \"\"\"\n    Merge only the 'SEL' system's OrdinalRank from df_massey onto df_games.\n    \n    df_games : DataFrame with columns [Season, DayNum, WTeamID, LTeamID, ...]\n    df_massey: DataFrame with columns [Season, RankingDayNum, SystemName, TeamID, OrdinalRank]\n               containing multiple systems.\n               \n    Returns\n    -------\n    A merged DataFrame with two extra columns: WOrdinalRank and LOrdinalRank (for SEL).\n    \"\"\"\n    # 1) Filter for SEL only\n    df_sel = df_massey[df_massey[\"SystemName\"] == \"SEL\"].copy()\n    \n    # 2) Create a long version of df_games\n    w_part = df_games[[\"Season\",\"DayNum\",\"WTeamID\"]].rename(\n        columns={\"WTeamID\":\"TeamID\"}\n    )\n    w_part[\"is_winner\"] = True\n    \n    l_part = df_games[[\"Season\",\"DayNum\",\"LTeamID\"]].rename(\n        columns={\"LTeamID\":\"TeamID\"}\n    )\n    l_part[\"is_winner\"] = False\n    \n    df_long = pd.concat([w_part, l_part], ignore_index=True)\n    \n    # Sort for asof merges\n    df_long = df_long.sort_values([\"Season\",\"TeamID\",\"DayNum\"])\n    df_sel = df_sel.sort_values([\"Season\",\"TeamID\",\"RankingDayNum\"])\n    \n    merged_list = []\n    \n    # 3) Groupwise merge_asof for each (Season, TeamID)\n    for (season, teamid), group_games in df_long.groupby([\"Season\",\"TeamID\"]):\n        # Slice SEL data for that (season, team)\n        mask = (df_sel[\"Season\"] == season) & (df_sel[\"TeamID\"] == teamid)\n        group_sel = df_sel.loc[mask, [\"RankingDayNum\",\"OrdinalRank\"]].copy()\n        group_sel = group_sel.rename(columns={\"RankingDayNum\":\"DayNum\"})\n        \n        # Sort\n        group_games = group_games.sort_values(\"DayNum\")\n        group_sel = group_sel.sort_values(\"DayNum\")\n        \n        # Merge asof\n        merged = pd.merge_asof(\n            group_games,\n            group_sel,\n            on=\"DayNum\",\n            direction=\"backward\"\n        )\n        merged_list.append(merged)\n    \n    df_long_merged = pd.concat(merged_list, ignore_index=True)\n    \n    # Now df_long_merged has [Season, TeamID, DayNum, is_winner, OrdinalRank]\n    # 4) Pivot back to w/l columns\n    w_sel = df_long_merged[df_long_merged[\"is_winner\"]==True][\n        [\"Season\",\"DayNum\",\"TeamID\",\"OrdinalRank\"]\n    ].rename(columns={\n        \"TeamID\":\"WTeamID\",\n        \"OrdinalRank\":\"WOrdinalRank_SEL\"\n    })\n    \n    l_sel = df_long_merged[df_long_merged[\"is_winner\"]==False][\n        [\"Season\",\"DayNum\",\"TeamID\",\"OrdinalRank\"]\n    ].rename(columns={\n        \"TeamID\":\"LTeamID\",\n        \"OrdinalRank\":\"LOrdinalRank_SEL\"\n    })\n    \n    # Merge back with df_games\n    df_games = df_games.merge(w_sel, how=\"left\", on=[\"Season\",\"DayNum\",\"WTeamID\"])\n    df_games = df_games.merge(l_sel, how=\"left\", on=[\"Season\",\"DayNum\",\"LTeamID\"])\n    \n    return df_games\n\n\n# Example usage:\n# df_with_sel = merge_sel_ordinals_onto_games(df_games, MMasseyOrdinals)\n# df_with_sel.head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:09:33.010383Z","iopub.execute_input":"2025-03-18T20:09:33.010731Z","iopub.status.idle":"2025-03-18T20:09:33.020039Z","shell.execute_reply.started":"2025-03-18T20:09:33.010702Z","shell.execute_reply":"2025-03-18T20:09:33.018897Z"}},"outputs":[],"execution_count":130},{"cell_type":"code","source":"df_with_sel = merge_sel_ordinals_onto_games(df, MMasseyOrdinals)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:09:36.311531Z","iopub.execute_input":"2025-03-18T20:09:36.311887Z","iopub.status.idle":"2025-03-18T20:10:05.514031Z","shell.execute_reply.started":"2025-03-18T20:09:36.31186Z","shell.execute_reply":"2025-03-18T20:10:05.513019Z"}},"outputs":[],"execution_count":131},{"cell_type":"code","source":"df = df_with_sel.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:10:15.402164Z","iopub.execute_input":"2025-03-18T20:10:15.402552Z","iopub.status.idle":"2025-03-18T20:10:15.430178Z","shell.execute_reply.started":"2025-03-18T20:10:15.402521Z","shell.execute_reply":"2025-03-18T20:10:15.429128Z"}},"outputs":[],"execution_count":132},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\ndef create_deep_exponential_decay_features(df, alpha=0.2):\n    \"\"\"\n    Takes in a DataFrame 'df' with columns (at least):\n      Season, DayNum,\n      WTeamID, WScore, WFGM, WFGA, WFGM3, WFGA3, WFTM, WFTA, WOR, WDR, WAst, WTO, WStl, WBlk, WPF,\n      LTeamID, LScore, LFGM, LFGA, LFGM3, LFGA3, LFTM, LFTA, LOR, LDR, LAst, LTO, LStl, LBlk, LPF, ...\n    and returns a DataFrame with new columns for each team’s exponentially weighted stats.\n\n    We go \"deep\" by computing many stats from the columns, such as:\n      - Basic raw totals (Score, FGM, FGA, etc.)\n      - Shooting percentages (FGpct, 2Ppct, 3Ppct, eFGpct, FTpct)\n      - Distribution metrics (Shots2Dist, Shots3Dist, FTrate)\n      - Rebounding & sum: OR, DR, total Rebounds (Reb)\n      - Assists/TO ratio, steals, blocks, fouls\n      - Possessions & offensive rating (OffRtg)\n    Then we create an EWM version of each of these with alpha=0.2, shifted by 1 game to prevent leakage.\n    \"\"\"\n\n    # ---- 1) LONG-FORM CONVERSION (WINNER -> single row, LOSER -> single row) ----\n    df_w = df[[\n        \"Season\",\"DayNum\",\"WTeamID\",\"WScore\",\"WFGM\",\"WFGA\",\"WFGM3\",\"WFGA3\",\"WFTM\",\"WFTA\",\n        \"WOR\",\"WDR\",\"WAst\",\"WTO\",\"WStl\",\"WBlk\",\"WPF\"\n    ]].copy()\n    df_w.rename(columns={\n        \"WTeamID\":\"TeamID\",\n        \"WScore\":\"Score\",\n        \"WFGM\":\"FGM\",\n        \"WFGA\":\"FGA\",\n        \"WFGM3\":\"FGM3\",\n        \"WFGA3\":\"FGA3\",\n        \"WFTM\":\"FTM\",\n        \"WFTA\":\"FTA\",\n        \"WOR\":\"OR\",\n        \"WDR\":\"DR\",\n        \"WAst\":\"Ast\",\n        \"WTO\":\"TO\",\n        \"WStl\":\"Stl\",\n        \"WBlk\":\"Blk\",\n        \"WPF\":\"PF\"\n    }, inplace=True)\n    df_w[\"is_winner\"] = 1\n\n    df_l = df[[\n        \"Season\",\"DayNum\",\"LTeamID\",\"LScore\",\"LFGM\",\"LFGA\",\"LFGM3\",\"LFGA3\",\"LFTM\",\"LFTA\",\n        \"LOR\",\"LDR\",\"LAst\",\"LTO\",\"LStl\",\"LBlk\",\"LPF\"\n    ]].copy()\n    df_l.rename(columns={\n        \"LTeamID\":\"TeamID\",\n        \"LScore\":\"Score\",\n        \"LFGM\":\"FGM\",\n        \"LFGA\":\"FGA\",\n        \"LFGM3\":\"FGM3\",\n        \"LFGA3\":\"FGA3\",\n        \"LFTM\":\"FTM\",\n        \"LFTA\":\"FTA\",\n        \"LOR\":\"OR\",\n        \"LDR\":\"DR\",\n        \"LAst\":\"Ast\",\n        \"LTO\":\"TO\",\n        \"LStl\":\"Stl\",\n        \"LBlk\":\"Blk\",\n        \"LPF\":\"PF\"\n    }, inplace=True)\n    df_l[\"is_winner\"] = 0\n\n    df_long = pd.concat([df_w, df_l], ignore_index=True)\n    df_long.sort_values([\"Season\",\"TeamID\",\"DayNum\"], inplace=True)\n    df_long.reset_index(drop=True, inplace=True)\n\n    # ---- 2) COMPUTE PER-GAME STATS ----\n    # We'll create a bunch of columns. We must handle division-by-zero carefully.\n\n    # Basic raw columns are already there: Score, FGM, FGA, FGM3, FGA3, FTM, FTA, OR, DR, Ast, TO, Stl, Blk, PF.\n\n    # 2-pt Shots:\n    df_long[\"FGM2\"] = df_long[\"FGM\"] - df_long[\"FGM3\"]\n    df_long[\"FGA2\"] = df_long[\"FGA\"] - df_long[\"FGA3\"]\n\n    # Shooting percentages:\n    df_long[\"FGpct\"] = np.where(df_long[\"FGA\"] != 0, df_long[\"FGM\"] / df_long[\"FGA\"], np.nan)\n    df_long[\"FG2pct\"] = np.where(df_long[\"FGA2\"] != 0, df_long[\"FGM2\"] / df_long[\"FGA2\"], np.nan)\n    df_long[\"FG3pct\"] = np.where(df_long[\"FGA3\"] != 0, df_long[\"FGM3\"] / df_long[\"FGA3\"], np.nan)\n    df_long[\"eFGpct\"] = np.where(df_long[\"FGA\"] != 0,\n                                 (df_long[\"FGM\"] + 0.5 * df_long[\"FGM3\"]) / df_long[\"FGA\"],\n                                 np.nan)\n    df_long[\"FTpct\"] = np.where(df_long[\"FTA\"] != 0, df_long[\"FTM\"] / df_long[\"FTA\"], np.nan)\n\n    # Distributions (what fraction of attempts are 2 vs. 3 vs. FT?):\n    df_long[\"Shots2Dist\"] = np.where(df_long[\"FGA\"] != 0, df_long[\"FGA2\"] / df_long[\"FGA\"], np.nan)\n    df_long[\"Shots3Dist\"] = np.where(df_long[\"FGA\"] != 0, df_long[\"FGA3\"] / df_long[\"FGA\"], np.nan)\n    df_long[\"FTrate\"]     = np.where(df_long[\"FGA\"] != 0, df_long[\"FTA\"] / df_long[\"FGA\"], np.nan)\n\n    # Rebounding:\n    df_long[\"Reb\"] = df_long[\"OR\"] + df_long[\"DR\"]\n\n    # Assist/TO ratio:\n    df_long[\"AstTO\"] = np.where(df_long[\"TO\"] != 0, df_long[\"Ast\"] / df_long[\"TO\"], np.nan)\n\n    # Possessions (an approximation):\n    # Standard formula: poss = FGA + 0.475*FTA + TO - OR\n    # or sometimes FGA - OR + TO + 0.475*FTA\n    # We'll pick one approach:\n    df_long[\"Poss\"] = df_long[\"FGA\"] + 0.475*df_long[\"FTA\"] + df_long[\"TO\"] - df_long[\"OR\"]\n    # Offensive Rating (points scored per 100 possessions)\n    df_long[\"OffRtg\"] = np.where(df_long[\"Poss\"] > 0, (df_long[\"Score\"] / df_long[\"Poss\"]) * 100, np.nan)\n\n    # Potentially we can do raw per-game stats for Stl, Blk, PF, OR, DR, etc. \n    # We'll do EWM on them too.\n\n    # ---- 3) DETERMINE WHICH STATS TO APPLY EWM ON ----\n    # We'll go fairly broad to \"touch every purposeful column\" from the dataset:\n    stats_to_ewm = [\n        # raw\n        \"Score\", \"FGM\", \"FGA\", \"FGM2\", \"FGA2\", \"FGM3\", \"FGA3\", \"FTM\", \"FTA\",\n        \"OR\", \"DR\", \"Reb\", \"Ast\", \"TO\", \"Stl\", \"Blk\", \"PF\", \n        # rates & percentages\n        \"FGpct\", \"FG2pct\", \"FG3pct\", \"eFGpct\", \"FTpct\",\n        \"Shots2Dist\", \"Shots3Dist\", \"FTrate\", \"AstTO\",\n        # advanced\n        \"Poss\", \"OffRtg\"\n    ]\n\n    # ---- 4) EXPONENTIAL WEIGHTED MEAN (EWM) WITH 1-GAME SHIFT PER (Season, TeamID) ----\n    def ewm_transform(group):\n        group = group.copy()\n        for col in stats_to_ewm:\n            # SHIFT by 1 so we don't leak current-game info\n            shifted = group[col].shift(1)\n            # EWM with alpha=alpha\n            ewm_series = shifted.ewm(alpha=alpha, adjust=False).mean()\n            group[col + \"_ewm\"] = ewm_series\n        return group\n\n    df_long = df_long.groupby([\"Season\",\"TeamID\"], group_keys=False).apply(ewm_transform)\n\n    # ---- 5) MERGE BACK INTO THE ORIGINAL WIDE DF ----\n    # We'll keep just the final EWM columns + (Season, DayNum, TeamID, is_winner)\n    ewm_cols = [c + \"_ewm\" for c in stats_to_ewm]\n    merge_cols = [\"Season\",\"TeamID\",\"DayNum\",\"is_winner\"] + ewm_cols\n\n    # Winner side\n    df_long_w = df_long[df_long[\"is_winner\"]==1][merge_cols].rename(columns={\"TeamID\":\"WTeamID\"})\n    # rename \"Score_ewm\" -> \"WScore_ewm\", \"FGpct_ewm\" -> \"WFGpct_ewm\", etc.\n    for c in ewm_cols:\n        new_name = \"W\" + c.replace(\"_ewm\",\"\") + \"_ewm\"  # e.g. WScore_ewm\n        df_long_w.rename(columns={c: new_name}, inplace=True)\n\n    # Loser side\n    df_long_l = df_long[df_long[\"is_winner\"]==0][merge_cols].rename(columns={\"TeamID\":\"LTeamID\"})\n    for c in ewm_cols:\n        new_name = \"L\" + c.replace(\"_ewm\",\"\") + \"_ewm\"\n        df_long_l.rename(columns={c: new_name}, inplace=True)\n\n    # Merge them back\n    df_merged = df.merge(\n        df_long_w.drop(columns=[\"is_winner\"]),\n        how=\"left\",\n        on=[\"Season\",\"DayNum\",\"WTeamID\"]\n    )\n    df_merged = df_merged.merge(\n        df_long_l.drop(columns=[\"is_winner\"]),\n        how=\"left\",\n        on=[\"Season\",\"DayNum\",\"LTeamID\"]\n    )\n\n    return df_merged\n\n# EXAMPLE USAGE:\n# df_deep = create_deep_exponential_decay_features(df, alpha=0.2)\n# \n# - This will create a large number of new columns:\n#   WScore_ewm, WFGpct_ewm, WFG2pct_ewm, WFG3pct_ewm, WShots2Dist_ewm, WShots3Dist_ewm, ...\n#   plus the same for LTeam (LScore_ewm, LFGpct_ewm, etc.).\n# - They are all based on exponential smoothing of the team's prior games,\n#   with alpha=0.2 weighting recent games more heavily.\n# \n# You can then feed these columns into your predictive model, \n# alongside Elo, seeds, Massey Ordinals, etc.\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:10:23.226249Z","iopub.execute_input":"2025-03-18T20:10:23.226613Z","iopub.status.idle":"2025-03-18T20:10:23.245573Z","shell.execute_reply.started":"2025-03-18T20:10:23.226583Z","shell.execute_reply":"2025-03-18T20:10:23.244431Z"}},"outputs":[],"execution_count":133},{"cell_type":"code","source":"df_deep = create_deep_exponential_decay_features(df, alpha=0.2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:10:26.00042Z","iopub.execute_input":"2025-03-18T20:10:26.000754Z","iopub.status.idle":"2025-03-18T20:12:49.662178Z","shell.execute_reply.started":"2025-03-18T20:10:26.000727Z","shell.execute_reply":"2025-03-18T20:12:49.661079Z"}},"outputs":[{"name":"stderr","text":"<ipython-input-133-2f997b5efe00>:137: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  df_long = df_long.groupby([\"Season\",\"TeamID\"], group_keys=False).apply(ewm_transform)\n","output_type":"stream"}],"execution_count":134},{"cell_type":"code","source":"df = df_deep.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:13:08.460632Z","iopub.execute_input":"2025-03-18T20:13:08.461002Z","iopub.status.idle":"2025-03-18T20:13:08.519449Z","shell.execute_reply.started":"2025-03-18T20:13:08.460975Z","shell.execute_reply":"2025-03-18T20:13:08.518448Z"}},"outputs":[],"execution_count":135},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\n\ndef label_lower_id_team(df):\n    df = df.copy()\n    # Identify which is lower/higher ID\n    df[\"LowerTeamID\"] = df[[\"WTeamID\",\"LTeamID\"]].min(axis=1)\n    df[\"HigherTeamID\"] = df[[\"WTeamID\",\"LTeamID\"]].max(axis=1)\n    \n    # LowerTeamWon = 1 if the lower ID was the winner\n    # If WTeamID == LowerTeamID, that means the lower ID is the winner\n    df[\"LowerTeamWon\"] = np.where(df[\"WTeamID\"] == df[\"LowerTeamID\"], 1, 0)\n    \n    return df\n\ndf_final = label_lower_id_team(df)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:13:11.226963Z","iopub.execute_input":"2025-03-18T20:13:11.227369Z","iopub.status.idle":"2025-03-18T20:13:11.293027Z","shell.execute_reply.started":"2025-03-18T20:13:11.227336Z","shell.execute_reply":"2025-03-18T20:13:11.291997Z"}},"outputs":[],"execution_count":136},{"cell_type":"code","source":"df_final.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:13:14.351999Z","iopub.execute_input":"2025-03-18T20:13:14.352388Z","iopub.status.idle":"2025-03-18T20:13:14.358879Z","shell.execute_reply.started":"2025-03-18T20:13:14.352355Z","shell.execute_reply":"2025-03-18T20:13:14.357849Z"}},"outputs":[{"execution_count":137,"output_type":"execute_result","data":{"text/plain":"Index(['Season', 'DayNum', 'WTeamID', 'WScore', 'LTeamID', 'LScore', 'WLoc',\n       'NumOT', 'WFGM', 'WFGA',\n       ...\n       'LFTpct_ewm', 'LShots2Dist_ewm', 'LShots3Dist_ewm', 'LFTrate_ewm',\n       'LAstTO_ewm', 'LPoss_ewm', 'LOffRtg_ewm', 'LowerTeamID', 'HigherTeamID',\n       'LowerTeamWon'],\n      dtype='object', length=116)"},"metadata":{}}],"execution_count":137},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\n\ndef map_wl_columns_to_lower_higher(df, skip_cols=None):\n    \"\"\"\n    For each column that starts with 'W' or 'L', \n    create corresponding 'Lower___' and 'Higher___' columns,\n    depending on whether WTeamID == LowerTeamID or not.\n\n    Params\n    ------\n    df : pd.DataFrame\n        Must include columns:\n          - WTeamID, LTeamID (the team IDs)\n          - LowerTeamID, HigherTeamID (from a prior step)\n          - 'Wxxx' and 'Lxxx' columns that you want mapped\n    skip_cols : set or list of columns to ignore\n        e.g. {'WTeamID','LTeamID','WLoc','WSeed',...} \n        (defaults to None, which means skip just the IDs automatically)\n\n    Returns\n    -------\n    df_out : pd.DataFrame\n        A copy of df with new columns:\n        Lower___, Higher___ for each matching pair (Wxxx, Lxxx).\n    \"\"\"\n    df = df_final.copy()\n    if skip_cols is None:\n        # By default, skip columns that are obviously ID or labeling\n        skip_cols = set([\"WTeamID\",\"LTeamID\",\"LowerTeamID\",\"HigherTeamID\"])\n    else:\n        skip_cols = set(skip_cols).union([\"WTeamID\",\"LTeamID\",\"LowerTeamID\",\"HigherTeamID\"])\n\n    # We'll collect new columns in a dict, then assign at the end\n    new_cols = {}\n\n    # 1) Identify all columns that start with 'W'\n    w_cols = [c for c in df.columns if c.startswith(\"W\") and c not in skip_cols]\n    \n    for w_col in w_cols:\n        # Derive the corresponding L-column name by replacing leading 'W' with 'L'\n        base_name = w_col[1:]  # e.g. if w_col = 'WFGpct_ewm', base_name = 'FGpct_ewm'\n        l_col = \"L\" + base_name\n        \n        # Only proceed if the L-column also exists\n        if l_col not in df.columns:\n            continue  # skip if there's no matching L-col\n\n        # We'll create \"Lower{base_name}\" and \"Higher{base_name}\"\n        lower_col = \"Lower\" + base_name\n        higher_col = \"Higher\" + base_name\n\n        # Construct the new columns by checking if WTeamID == LowerTeamID\n        # For each row:\n        #   if WTeam is the lower ID, then Lower{base_name} = df[w_col], Higher{base_name} = df[l_col]\n        #   else Lower{base_name} = df[l_col], Higher{base_name} = df[w_col]\n        \n        lower_vals = np.where(\n            df[\"WTeamID\"] == df[\"LowerTeamID\"],\n            df[w_col],\n            df[l_col]\n        )\n        higher_vals = np.where(\n            df[\"WTeamID\"] == df[\"LowerTeamID\"],\n            df[l_col],\n            df[w_col]\n        )\n\n        new_cols[lower_col] = lower_vals\n        new_cols[higher_col] = higher_vals\n\n    # 2) Assign these new columns to the DataFrame\n    for col_name, vals in new_cols.items():\n        df[col_name] = vals\n\n    return df\n\n# Example usage:\n# df_final = label_lower_id_team(df_final)  # Must have LowerTeamID, HigherTeamID\n# df_final = map_wl_columns_to_lower_higher(df_final, skip_cols=[\"WLoc\",\"LLoc\",\"WScore\",\"LScore\"])\n# \n# This will produce new columns like LowerEloBefore, HigherEloBefore, LowerFGpct_ewm, HigherFGpct_ewm, etc.\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:13:17.856357Z","iopub.execute_input":"2025-03-18T20:13:17.856734Z","iopub.status.idle":"2025-03-18T20:13:17.865743Z","shell.execute_reply.started":"2025-03-18T20:13:17.856704Z","shell.execute_reply":"2025-03-18T20:13:17.864538Z"}},"outputs":[],"execution_count":138},{"cell_type":"code","source":"df_last = map_wl_columns_to_lower_higher(df_final, skip_cols=None)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:24:34.057489Z","iopub.execute_input":"2025-03-18T20:24:34.057861Z","iopub.status.idle":"2025-03-18T20:24:34.270942Z","shell.execute_reply.started":"2025-03-18T20:24:34.057828Z","shell.execute_reply":"2025-03-18T20:24:34.269793Z"}},"outputs":[{"name":"stderr","text":"<ipython-input-138-e6310c47de46>:74: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  df[col_name] = vals\n<ipython-input-138-e6310c47de46>:74: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  df[col_name] = vals\n<ipython-input-138-e6310c47de46>:74: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  df[col_name] = vals\n<ipython-input-138-e6310c47de46>:74: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  df[col_name] = vals\n<ipython-input-138-e6310c47de46>:74: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  df[col_name] = vals\n<ipython-input-138-e6310c47de46>:74: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  df[col_name] = vals\n<ipython-input-138-e6310c47de46>:74: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  df[col_name] = vals\n<ipython-input-138-e6310c47de46>:74: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  df[col_name] = vals\n<ipython-input-138-e6310c47de46>:74: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n  df[col_name] = vals\n","output_type":"stream"}],"execution_count":152},{"cell_type":"code","source":"import re\n\ndef drop_leaky_columns(df):\n    \"\"\"\n    Removes columns that reflect the current game's final outcome or post-game stats,\n    such as 'WScore', 'WFGM', ... 'WTeamEloAfter', 'WTeamEloDelta', etc.,\n    as well as their 'Lower'/'Higher' mapped versions.\n    \"\"\"\n    # Define regex patterns for columns that leak the current game outcome\n    # Adjust to your preference. \n    # For example, 'WFGM', 'LFGM' might be enough to match WFGM2_ewm if you prefer\n    # a narrower match, then be more explicit in patterns.\n\n    patterns = [\n        r'^WScore$', r'^LScore$',\n        r'^WFGM', r'^LFGM',  # also covers WFGM3, WFGM2, etc.\n        r'^WFGA', r'^LFGA',\n        r'^WFTM', r'^LFTM',\n        r'^WFTA', r'^LFTA',\n        r'^WOR',  r'^LOR',\n        r'^WDR',  r'^LDR',\n        r'^WAst', r'^LAst',\n        r'^WTO$', r'^LTO$',    # watch out if you also have WTO_ewm. If you want that, refine pattern.\n        r'^WStl', r'^LStl',\n        r'^WBlk', r'^LBlk',\n        r'^WPF$', r'^LPF$',\n\n        # Post-game Elo columns and same-game deltas\n        r'^WTeamEloAfter$', r'^LTeamEloAfter$',\n        r'^WTeamEloDelta$', r'^LTeamEloDelta$',\n        r'^WTeamEloDelta2$', r'^LTeamEloDelta2$',\n\n        # Their Lower/Higher mapped versions:\n        r'^LowerScore$', r'^HigherScore$',\n        r'^LowerFGM', r'^HigherFGM',\n        r'^LowerFGA', r'^HigherFGA',\n        r'^LowerFTM', r'^HigherFTM',\n        r'^LowerFTA', r'^HigherFTA',\n        r'^LowerOR$', r'^HigherOR$',\n        r'^LowerDR$', r'^HigherDR$',\n        r'^LowerAst', r'^HigherAst',\n        r'^LowerTO$', r'^HigherTO$',\n        r'^LowerStl', r'^HigherStl',\n        r'^LowerBlk', r'^HigherBlk',\n        r'^LowerPF$', r'^HigherPF$',\n\n        r'^LowerTeamEloAfter$', r'^HigherTeamEloAfter$',\n        r'^LowerTeamEloDelta$', r'^HigherTeamEloDelta$',\n        r'^LowerTeamEloDelta2$', r'^HigherTeamEloDelta2$',\n    ]\n\n    # Collect columns to drop\n    cols_to_drop = []\n    for col in df.columns:\n        for pat in patterns:\n            if re.search(pat, col):\n                cols_to_drop.append(col)\n                break  # Move on to next column once matched\n\n    df = df.drop(columns=cols_to_drop, errors='ignore')\n    return df\n\n# Example usage:\n# df_no_leak = drop_leaky_columns(df)\n# \n# Now df_no_leak has removed all raw final boxscore stats, \n# post-game Elo, and same-game delta columns that might leak the outcome.\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:24:36.622394Z","iopub.execute_input":"2025-03-18T20:24:36.622745Z","iopub.status.idle":"2025-03-18T20:24:36.62982Z","shell.execute_reply.started":"2025-03-18T20:24:36.622716Z","shell.execute_reply":"2025-03-18T20:24:36.628703Z"}},"outputs":[],"execution_count":153},{"cell_type":"code","source":"df_no_leak = drop_leaky_columns(df_last)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:24:39.342491Z","iopub.execute_input":"2025-03-18T20:24:39.342847Z","iopub.status.idle":"2025-03-18T20:24:39.399052Z","shell.execute_reply.started":"2025-03-18T20:24:39.342817Z","shell.execute_reply":"2025-03-18T20:24:39.397895Z"}},"outputs":[],"execution_count":154},{"cell_type":"code","source":"df_no_leak.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:24:41.425285Z","iopub.execute_input":"2025-03-18T20:24:41.425703Z","iopub.status.idle":"2025-03-18T20:24:41.431903Z","shell.execute_reply.started":"2025-03-18T20:24:41.425673Z","shell.execute_reply":"2025-03-18T20:24:41.43074Z"}},"outputs":[{"execution_count":155,"output_type":"execute_result","data":{"text/plain":"Index(['Season', 'DayNum', 'WTeamID', 'LTeamID', 'WLoc', 'NumOT', 'istourney',\n       'WSeed', 'LSeed', 'WTeamEloBefore',\n       ...\n       'LowerShots2Dist_ewm', 'HigherShots2Dist_ewm', 'LowerShots3Dist_ewm',\n       'HigherShots3Dist_ewm', 'LowerFTrate_ewm', 'HigherFTrate_ewm',\n       'LowerPoss_ewm', 'HigherPoss_ewm', 'LowerOffRtg_ewm',\n       'HigherOffRtg_ewm'],\n      dtype='object', length=102)"},"metadata":{}}],"execution_count":155},{"cell_type":"code","source":"df = df_no_leak.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:24:44.366025Z","iopub.execute_input":"2025-03-18T20:24:44.3664Z","iopub.status.idle":"2025-03-18T20:24:44.449243Z","shell.execute_reply.started":"2025-03-18T20:24:44.366368Z","shell.execute_reply":"2025-03-18T20:24:44.448269Z"}},"outputs":[],"execution_count":156},{"cell_type":"code","source":"# For the winning team seed:\ndf[\"WSeed_missing\"] = df[\"WSeed\"].isna().astype(int)\ndf[\"WSeed\"] = df[\"WSeed\"].fillna(17)\n\n# For the losing team seed:\ndf[\"LSeed_missing\"] = df[\"LSeed\"].isna().astype(int)\ndf[\"LSeed\"] = df[\"LSeed\"].fillna(17)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:24:44.768441Z","iopub.execute_input":"2025-03-18T20:24:44.768803Z","iopub.status.idle":"2025-03-18T20:24:44.791072Z","shell.execute_reply.started":"2025-03-18T20:24:44.768776Z","shell.execute_reply":"2025-03-18T20:24:44.79022Z"}},"outputs":[],"execution_count":157},{"cell_type":"code","source":"print(df.isnull().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:24:47.078336Z","iopub.execute_input":"2025-03-18T20:24:47.078664Z","iopub.status.idle":"2025-03-18T20:24:47.146075Z","shell.execute_reply.started":"2025-03-18T20:24:47.078639Z","shell.execute_reply":"2025-03-18T20:24:47.144911Z"}},"outputs":[{"name":"stdout","text":"Season                 0\nDayNum                 0\nWTeamID                0\nLTeamID                0\nWLoc                   0\n                    ... \nHigherPoss_ewm      3974\nLowerOffRtg_ewm     4007\nHigherOffRtg_ewm    3974\nWSeed_missing          0\nLSeed_missing          0\nLength: 104, dtype: int64\n","output_type":"stream"}],"execution_count":158},{"cell_type":"code","source":"nonulls = []\nnulls3610 = []\nnulls3645 = []\n\nrandos = []\n\nfor col in df.columns:\n    if df[col].isnull().sum() == 0:\n        nonulls.append(col)\n    elif df[col].isnull().sum() == 3610:\n        nulls3610.append(col)\n    elif df[col].isnull().sum() == 3645:\n        nulls3645.append(col)\n    else:\n        randos.append(col)\n\nprint(randos)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:24:47.352725Z","iopub.execute_input":"2025-03-18T20:24:47.353053Z","iopub.status.idle":"2025-03-18T20:24:47.527898Z","shell.execute_reply.started":"2025-03-18T20:24:47.353027Z","shell.execute_reply":"2025-03-18T20:24:47.526852Z"}},"outputs":[{"name":"stdout","text":"['Welo_minus_seedAvgElo', 'Lelo_minus_seedAvgElo', 'WTeamEloDelta_lastGame', 'LTeamEloDelta_lastGame', 'WTeamEloDelta2_lastGame', 'LTeamEloDelta2_lastGame', 'WOrdinalRank_SEL', 'LOrdinalRank_SEL', 'WScore_ewm', 'WReb_ewm', 'WTO_ewm', 'WPF_ewm', 'WFGpct_ewm', 'WFG2pct_ewm', 'WFG3pct_ewm', 'WeFGpct_ewm', 'WFTpct_ewm', 'WShots2Dist_ewm', 'WShots3Dist_ewm', 'WFTrate_ewm', 'WPoss_ewm', 'WOffRtg_ewm', 'LScore_ewm', 'LReb_ewm', 'LTO_ewm', 'LPF_ewm', 'LFGpct_ewm', 'LFG2pct_ewm', 'LFG3pct_ewm', 'LeFGpct_ewm', 'LFTpct_ewm', 'LShots2Dist_ewm', 'LShots3Dist_ewm', 'LFTrate_ewm', 'LPoss_ewm', 'LOffRtg_ewm', 'LowerSeed', 'HigherSeed', 'Lowerelo_minus_seedAvgElo', 'Higherelo_minus_seedAvgElo', 'LowerTeamEloDelta_lastGame', 'HigherTeamEloDelta_lastGame', 'LowerTeamEloDelta2_lastGame', 'HigherTeamEloDelta2_lastGame', 'LowerOrdinalRank_SEL', 'HigherOrdinalRank_SEL', 'LowerScore_ewm', 'HigherScore_ewm', 'LowerOR_ewm', 'HigherOR_ewm', 'LowerDR_ewm', 'HigherDR_ewm', 'LowerReb_ewm', 'HigherReb_ewm', 'LowerTO_ewm', 'HigherTO_ewm', 'LowerPF_ewm', 'HigherPF_ewm', 'LowerFGpct_ewm', 'HigherFGpct_ewm', 'LowerFG2pct_ewm', 'HigherFG2pct_ewm', 'LowerFG3pct_ewm', 'HigherFG3pct_ewm', 'LowereFGpct_ewm', 'HighereFGpct_ewm', 'LowerFTpct_ewm', 'HigherFTpct_ewm', 'LowerShots2Dist_ewm', 'HigherShots2Dist_ewm', 'LowerShots3Dist_ewm', 'HigherShots3Dist_ewm', 'LowerFTrate_ewm', 'HigherFTrate_ewm', 'LowerPoss_ewm', 'HigherPoss_ewm', 'LowerOffRtg_ewm', 'HigherOffRtg_ewm']\n","output_type":"stream"}],"execution_count":159},{"cell_type":"code","source":"x = df[df[\"Season\"] == 2024]\nprint(x)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:24:49.503056Z","iopub.execute_input":"2025-03-18T20:24:49.503466Z","iopub.status.idle":"2025-03-18T20:24:49.523312Z","shell.execute_reply.started":"2025-03-18T20:24:49.503435Z","shell.execute_reply":"2025-03-18T20:24:49.52221Z"}},"outputs":[{"name":"stdout","text":"        Season  DayNum  WTeamID  LTeamID WLoc  NumOT  istourney WSeed LSeed  \\\n108949    2024       0     1101     1329    A      0          0    17    17   \n108950    2024       0     1103     1355    A      0          0    17    17   \n108951    2024       0     1104     1287    H      0          0    17    17   \n108952    2024       0     1112     1288    H      0          0    17    17   \n108953    2024       0     1114     1402    H      0          0    17    17   \n...        ...     ...      ...      ...  ...    ...        ...   ...   ...   \n114618    2024     146     1301     1181    N      0          1   Z11   Z04   \n114619    2024     146     1345     1397    N      0          1   Y01   Y02   \n114620    2024     152     1163     1104    N      0          1   W01   X04   \n114621    2024     152     1345     1301    N      0          1   Y01   Z11   \n114622    2024     154     1163     1345    N      0          1   W01   Y01   \n\n        WTeamEloBefore  ...  LowerShots3Dist_ewm  HigherShots3Dist_ewm  \\\n108949     1500.000000  ...                  NaN                   NaN   \n108950     1500.000000  ...                  NaN                   NaN   \n108951     1500.000000  ...                  NaN                   NaN   \n108952     1500.000000  ...                  NaN                   NaN   \n108953     1500.000000  ...                  NaN                   NaN   \n...                ...  ...                  ...                   ...   \n114618     1650.883027  ...             0.387278              0.332890   \n114619     1761.135836  ...             0.340523              0.415865   \n114620     1801.751200  ...             0.453972              0.371429   \n114621     1772.835928  ...             0.309646              0.329022   \n114622     1811.122335  ...             0.377788              0.354127   \n\n        LowerFTrate_ewm  HigherFTrate_ewm  LowerPoss_ewm  HigherPoss_ewm  \\\n108949              NaN               NaN            NaN             NaN   \n108950              NaN               NaN            NaN             NaN   \n108951              NaN               NaN            NaN             NaN   \n108952              NaN               NaN            NaN             NaN   \n108953              NaN               NaN            NaN             NaN   \n...                 ...               ...            ...             ...   \n114618         0.323056          0.350217      64.314243       69.096820   \n114619         0.377545          0.332349      67.448396       70.551263   \n114620         0.363759          0.285520      76.476111       65.970517   \n114621         0.356840          0.426564      68.662456       68.093717   \n114622         0.286481          0.377615      65.686413       67.224974   \n\n        LowerOffRtg_ewm  HigherOffRtg_ewm  WSeed_missing  LSeed_missing  \n108949              NaN               NaN              1              1  \n108950              NaN               NaN              1              1  \n108951              NaN               NaN              1              1  \n108952              NaN               NaN              1              1  \n108953              NaN               NaN              1              1  \n...                 ...               ...            ...            ...  \n114618       113.471900        110.437861              0              0  \n114619       122.677770        107.003151              0              0  \n114620       117.141266        122.441451              0              0  \n114621       111.062280        118.517172              0              0  \n114622       124.599172        114.578443              0              0  \n\n[5674 rows x 104 columns]\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"}],"execution_count":160},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, brier_score_loss\n\n# Suppose your main DataFrame is df, containing:\n#  - \"Season\"\n#  - \"LowerTeamWon\" (the label, 0/1)\n#  - all other feature columns (Elo, ewm stats, seeds, etc.)\n\n########################################\n# 1) TIME-BASED SPLIT (train <=2023, test=2024)\n########################################\n\ntrain_df = df[df[\"Season\"] <= 2023].copy()\ntest_df  = df[df[\"Season\"] >= 2024].copy()\n\n# Separate features & target\nX_train = train_df.drop(columns=[\"LowerTeamWon\", \"Season\", \"DayNum\", 'WLoc', \"WTeamID\", \"LTeamID\", \"TeamID\", \"LowerTeamID\", \"HigherTeamID\"], errors=\"ignore\")\ny_train = train_df[\"LowerTeamWon\"]\n\nX_test  = test_df.drop(columns=[\"LowerTeamWon\", \"Season\", \"DayNum\", 'WLoc', \"WTeamID\", \"LTeamID\", \"TeamID\", \"LowerTeamID\", \"HigherTeamID\"], errors=\"ignore\")\ny_test  = test_df[\"LowerTeamWon\"]\n\n########################################\n# 2) DROP END-OF-REGULAR-SEASON ELO COLUMNS\n########################################\n\ndrop_cols = [\n    \"WTeam_regSeasonEnd\", \n    \"LTeam_regSeasonEnd\", \n    \"LowerTeam_regSeasonEnd\", \n    \"HigherTeam_regSeasonEnd\",\n]\n\nX_train.drop(columns=drop_cols, errors=\"ignore\", inplace=True)\nX_test.drop(columns=drop_cols, errors=\"ignore\", inplace=True)\n\n########################################\n# 3) REMOVE ROWS WITH MISSING VALUES\n########################################\n\nX_train = X_train.dropna()\ny_train = y_train.loc[X_train.index]  # keep alignment\n\nX_test = X_test.dropna()\ny_test = y_test.loc[X_test.index]\n\n\n########################################\n# 4) ONE-HOT ENCODE SEED COLUMNS\n########################################\n\n# e.g. seeds can appear as \"WSeed\", \"LSeed\", \"LowerSeed\", \"HigherSeed\"\ncategorical_cols = [\"WSeed\", \"LSeed\", \"LowerSeed\", \"HigherSeed\"]\n\nX_train_encoded = pd.get_dummies(X_train, columns=categorical_cols, drop_first=False)\nX_test_encoded  = pd.get_dummies(X_test, columns=categorical_cols, drop_first=False)\n\n# Align columns in case the one-hot categories differ\nX_train_encoded, X_test_encoded = X_train_encoded.align(\n    X_test_encoded, \n    join='outer', \n    axis=1, \n    fill_value=0\n)\n\n########################################\n# 5) FIT A RANDOM FOREST\n########################################\n\nrf = RandomForestClassifier(\n    n_estimators=200, \n    max_depth=8, \n    random_state=42\n)\n\nrf.fit(X_train_encoded, y_train)\n\n########################################\n# 6) PREDICT & EVALUATE\n########################################\n\ny_pred = rf.predict(X_test_encoded)\ny_prob = rf.predict_proba(X_test_encoded)[:, 1]  # Probability that LowerTeamWon = 1\n\nacc = accuracy_score(y_test, y_pred)\nbrier = brier_score_loss(y_test, y_prob)\n\nprint(\"Test Accuracy:\", acc)\nprint(\"Test Brier Score:\", brier)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:41:43.699877Z","iopub.execute_input":"2025-03-18T20:41:43.700269Z","iopub.status.idle":"2025-03-18T20:41:44.814018Z","shell.execute_reply.started":"2025-03-18T20:41:43.700235Z","shell.execute_reply":"2025-03-18T20:41:44.812879Z"}},"outputs":[{"name":"stdout","text":"Test Accuracy: 0.9850746268656716\nTest Brier Score: 0.10106431620419602\n","output_type":"stream"}],"execution_count":169},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Extract feature importances from the Random Forest\nimportances = rf.feature_importances_\nfeatures = X_train_encoded.columns\n\n# Create a DataFrame for convenience\nfeat_importance = pd.DataFrame({\n    \"Feature\": features,\n    \"Importance\": importances\n}).sort_values(\"Importance\", ascending=False)\n\nprint(feat_importance.head(20))  # Print top 20 features\n\n# Plot the top 20 features\nplt.figure(figsize=(10,6))\nplt.barh(feat_importance[\"Feature\"].head(20)[::-1], feat_importance[\"Importance\"].head(20)[::-1])\nplt.xlabel(\"Feature Importance\")\nplt.title(\"Top 20 Important Features\")\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:41:51.454843Z","iopub.execute_input":"2025-03-18T20:41:51.455234Z","iopub.status.idle":"2025-03-18T20:41:51.774384Z","shell.execute_reply.started":"2025-03-18T20:41:51.455168Z","shell.execute_reply":"2025-03-18T20:41:51.773151Z"}},"outputs":[{"name":"stdout","text":"                   Feature  Importance\n317    LowerTeamMomentum_5    0.091140\n220   LowerOrdinalRank_SEL    0.061965\n99    HigherTeamMomentum_5    0.060542\n8    HigherOrdinalRank_SEL    0.054307\n107       LOrdinalRank_SEL    0.035948\n326       WOrdinalRank_SEL    0.029060\n418        WTeamMomentum_5    0.027867\n210        LTeamMomentum_5    0.019427\n106            LOffRtg_ewm    0.018043\n322             WFGpct_ewm    0.017510\n318        LowereFGpct_ewm    0.016048\n100       HighereFGpct_ewm    0.014286\n5         HigherFTrate_ewm    0.013656\n320            WFG2pct_ewm    0.013393\n7         HigherOffRtg_ewm    0.012877\n209                LTO_ewm    0.012638\n103             LFGpct_ewm    0.012424\n325            WOffRtg_ewm    0.011906\n330             WScore_ewm    0.011840\n211            LeFGpct_ewm    0.011338\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":170},{"cell_type":"code","source":"X_train.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T20:29:25.303715Z","iopub.execute_input":"2025-03-18T20:29:25.304146Z","iopub.status.idle":"2025-03-18T20:29:25.310903Z","shell.execute_reply.started":"2025-03-18T20:29:25.304102Z","shell.execute_reply":"2025-03-18T20:29:25.3098Z"}},"outputs":[{"execution_count":166,"output_type":"execute_result","data":{"text/plain":"Index(['WTeamID', 'LTeamID', 'NumOT', 'istourney', 'WSeed', 'LSeed',\n       'WTeamEloBefore', 'LTeamEloBefore', 'WTeamMomentum_5',\n       'LTeamMomentum_5', 'Welo_minus_seedAvgElo', 'Lelo_minus_seedAvgElo',\n       'WTeamEloDelta_lastGame', 'LTeamEloDelta_lastGame',\n       'WTeamEloDelta2_lastGame', 'LTeamEloDelta2_lastGame',\n       'WOrdinalRank_SEL', 'LOrdinalRank_SEL', 'WScore_ewm', 'WReb_ewm',\n       'WTO_ewm', 'WPF_ewm', 'WFGpct_ewm', 'WFG2pct_ewm', 'WFG3pct_ewm',\n       'WeFGpct_ewm', 'WFTpct_ewm', 'WShots2Dist_ewm', 'WShots3Dist_ewm',\n       'WFTrate_ewm', 'WPoss_ewm', 'WOffRtg_ewm', 'LScore_ewm', 'LReb_ewm',\n       'LTO_ewm', 'LPF_ewm', 'LFGpct_ewm', 'LFG2pct_ewm', 'LFG3pct_ewm',\n       'LeFGpct_ewm', 'LFTpct_ewm', 'LShots2Dist_ewm', 'LShots3Dist_ewm',\n       'LFTrate_ewm', 'LPoss_ewm', 'LOffRtg_ewm', 'LowerTeamID',\n       'HigherTeamID', 'LowerSeed', 'HigherSeed', 'LowerTeamEloBefore',\n       'HigherTeamEloBefore', 'LowerTeamMomentum_5', 'HigherTeamMomentum_5',\n       'Lowerelo_minus_seedAvgElo', 'Higherelo_minus_seedAvgElo',\n       'LowerTeamEloDelta_lastGame', 'HigherTeamEloDelta_lastGame',\n       'LowerTeamEloDelta2_lastGame', 'HigherTeamEloDelta2_lastGame',\n       'LowerOrdinalRank_SEL', 'HigherOrdinalRank_SEL', 'LowerScore_ewm',\n       'HigherScore_ewm', 'LowerOR_ewm', 'HigherOR_ewm', 'LowerDR_ewm',\n       'HigherDR_ewm', 'LowerReb_ewm', 'HigherReb_ewm', 'LowerTO_ewm',\n       'HigherTO_ewm', 'LowerPF_ewm', 'HigherPF_ewm', 'LowerFGpct_ewm',\n       'HigherFGpct_ewm', 'LowerFG2pct_ewm', 'HigherFG2pct_ewm',\n       'LowerFG3pct_ewm', 'HigherFG3pct_ewm', 'LowereFGpct_ewm',\n       'HighereFGpct_ewm', 'LowerFTpct_ewm', 'HigherFTpct_ewm',\n       'LowerShots2Dist_ewm', 'HigherShots2Dist_ewm', 'LowerShots3Dist_ewm',\n       'HigherShots3Dist_ewm', 'LowerFTrate_ewm', 'HigherFTrate_ewm',\n       'LowerPoss_ewm', 'HigherPoss_ewm', 'LowerOffRtg_ewm',\n       'HigherOffRtg_ewm', 'WSeed_missing', 'LSeed_missing'],\n      dtype='object')"},"metadata":{}}],"execution_count":166},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}